! Serializing Complex Objects with Fuel

Fuel is a fast open-source general-purpose binary object serialization framework developed by Mariano Martinez-Peck, Martìn Dias and Max Leske. It is robust and used in many industrial cases. A fundamental reason for the creation of Fuel was speed: while there is a plethora of frameworks to serialize objects based on recursive parsing of the object graphs in textual format as XML, JSON, or STON, these approaches are often slow. 
@@authorToDo Add references to STON and JSON
(we will present STON and JSON in other chapters of this book).

Part of the speed of Fuel comes from the idea that objects are loaded more often than stored. This makes it worth to spend more time while storing to yield faster loading. Also, its storage scheme is based on the pickle format that puts similar objects into groups for efficiency and performance. As a result, Fuel has been shown to be one of the fastest object loaders, while still being a really fast object saver.
@@authorToDo ML: should we include references? Maybe to Mariano's phd?) 
Moreover, Fuel can serialize nearly any object in the image, it can even serialize a full execution stack and later reload it!

The main features of Fuel are as follows:
- It has an object-oriented design.
- It does not need special VM-support.
- It is modularly packaged.
- It can serialize/materialize not only plain objects but also classes, traits, methods, closures, contexts, packages, etc.
- It supports global references.
- It is very customizable: you can ignore certain instance variables, substitute objects by others, define pre and post serialization and materialization actions, etc.
- It supports class renaming and class reshaping.
- It has good test coverage and a large suite of benchmarks.

!! General Information

Fuel has been developed and maintained over the years by the following people: Martin Dias, Mariano Martinez Peck, Max Leske, Pavel Krivanek, Tristan Bourgois and Stéphane Ducasse (as PhD advisor and financer).

The idea of Fuel was developed by Mariano Martinez Peck based on the work by Eliot Miranda who worked on the "parcels" implementation for VisualWorks. Eliot's work again was based on the original "parcels" implementation by David Leib. "Parcels" demonstrates very nicely that the binary pickle format can be a good alternative to textual storage and that grouping of objects makes a lot of sense in object oriented systems.

Before going into details we present the ideas behind Fuel and it's main features and give basic usage examples.

!!!Goals

; Concrete
: Fuel doesn't aspire to have a dialect-interchange format. This makes it possible to serialize special objects like contexts, block closures, exceptions, compiled methods and classes. Although there are ports to other dialects, most notably Squeak, Fuel development is Pharo-centric.

; Flexible
: Depending on the context, there can be multiple ways of serializing the same object. For example, a class can be considered either a global or a regular object. In the former case, references to the class will be encoded by name and the class is expected to be part of the environment upon materialization; in the latter case, the class will be encoded in detail, with its method dictionary, etc.

; Fast
: Fuel has been designed for performance. Fuel comes with a complete benchmark suite to help analyse the performance with diverse sample sets, as well as to compare it against other serializers. Fuel's pickling algorithm achieves outstanding materialization performance, as well as very good serialization performance, even when compared to other binary formats such as ImageSegment.

; Object-Oriented Design
: A requirement from the onset was to have a good object-oriented design and to avoid special support from the virtual machine. In addition, Fuel has a complete test suite (over 600 unit tests), with a high degree of code coverage. Fuel code is also well-commented, both for classes and methods.

!!! Installation and demo
@Installation

Fuel 1.9 is available by default in Pharo since version 2.0 of Pharo. Therefore you do not need to install it.
The ""default packages"" work out of the box in Pharo 1.1.1, 1.1.2, 1.2, 1.3, 1.4, 2.0, 3.0 and 4.0 and Squeak 4.1, 4.2, 4.3, 4.4, 4.5.
The stable version at the time of writing is 1.9.4.

Open the ==Transcript== and execute the code below in a ==Playground==. This example serializes a set, the default ==Transcript== (which is a global) and a block. On materialization it shows that
- the set is correctly recreated,
- the global ==Transcript== is still the same instance (hasn't been modified)
- and the block can be evaluated properly.

[[[language=Smalltalk
| arrayToSerialize materializedArray |
arrayToSerialize := 
	Array 
		with: (Set with: 42)
		with: Transcript
		with: [ :aString | Transcript show: aString; cr ].

"Store (serialize)"
FLSerializer serialize: arrayToSerialize toFileNamed: 'demo.fuel'.

"Load (materialize)"
materializedArray := FLMaterializer materializeFromFileNamed: 'demo.fuel'.

Transcript
	show: 'The sets are equal: ';
	show: arrayToSerialize first = materializedArray first;
	cr;
	show: 'But not the same: ';
	show: arrayToSerialize first ~~ materializedArray first;
	cr;
	show: 'The global value Transcript is the same: ';
	show: arrayToSerialize second == materializedArray second;
	cr.
materializedArray third 
	value: 'The materialized block closure can be properly evaluated.'.
]]]

!!! Some links

- The home page of Fuel is *http://rmod.lille.inria.fr/web/software/Fuel*.
- Fuel's source code is stored at *http://smalltalkhub.com/#!/~Pharo/Fuel*.
- Fuel is built automatically at *https://ci.inria.fr/pharo-contribution/job/Fuel-Stable/*.



%=========================================================================% 


!! Getting Started
@GettingStarted

!!!Basic examples
Fuel offers some class-side messages to ease more common uses of serialization (==serialize:toFileNamed:==)
and materialization (==materializeFromFileNamed:==). The next example writes to and reads from a file:

[[[language=Smalltalk
FLSerializer serialize: 'stringToSerialize' toFileNamed: 'demo.fuel'. 
materializedString := FLMaterializer materializeFromFileNamed: 'demo.fuel'.
]]]

Fuel also provides the messages ==serializeToByteArray:== and ==materializeFromByteArray:== for storing into a ==ByteArray==. This can be interesting, for example, for serializing an object graph as a blob of data into a database when using Voyage.
@@authorToDo Put a reference to Voyage

[[[language=Smalltalk
anArray := FLSerializer serializeToByteArray: 'stringToSerialize'. 
materializedString := FLMaterializer materializeFromByteArray: anArray.
]]]

!!!FileStream

In the following example we work with file streams. Note that the stream needs to be set to binary mode:

[[[language=Smalltalk
'demo.fuel' asFileReference writeStreamDo: [ :aStream |
	FLSerializer newDefault 
		serialize: 'stringToSerialize' 
		on: aStream binary ].

'demo.fuel' asFileReference readStreamDo: [ :aStream |
	materializedString := (FLMaterializer newDefault 
		materializeFrom: aStream binary) root ].
]]]

In this example, we are no longer using the class-side messages. Now, for both ==FLSerializer== and ==FLMaterializer==, we first create instances with ==newDefault== and then perform the desired operations. As we will see in the next example, creating the instances allows for more flexibility on serialization and materialization.

!!!Compression 

Fuel does not care to what kind of stream it writes its data. This makes it easy to use stream compressors. An example of use is as follows:

[[[language=Smalltalk
'number.fuel.zip' asFileReference writeStreamDo: [ :aFileStream |
	|gzip|
	aFileStream binary.
	gzip := GZipWriteStream on: aFileStream.
	FLSerializer newDefault serialize: 123 on: gzip.
	gzip close ].

'number.fuel.zip' asFileReference readStreamDo: [ :aFileStream |
	|gzip|
	aFileStream binary.
	gzip := GZipReadStream on: aFileStream.
	materializedString := (FLMaterializer newDefault
		materializeFrom: gzip) root.
	gzip close ].
]]]

!!!Showing a progress bar

Sometimes it is nice to see progress updates on screen. Use the message ==showProgress== in this case. The progress bar functionality is available from the ==FuelProgressUpdate== package, so load that first:

[[[language=Smalltalk
	Gofer it
		url: 'http://smalltalkhub.com/mc/Pharo/Fuel/main';
		package: 'ConfigurationOfFuel';
		load.

	(ConfigurationOfFuel project  version: #stable) 
		load: 'FuelProgressUpdate'.
]]]

The following example uses the message ==showProgress== to display a progress bar during operations.

[[[language=Smalltalk
'numbers.fuel' asFileReference writeStreamDo: [ :aStream |
	FLSerializer newDefault 
		showProgress;
		serialize: (1 to: 200000) asArray
		on: aStream binary ].
	
'numbers.fuel' asFileReference readStreamDo: [ :aStream | 
	materializedString :=
		(FLMaterializer newDefault 
				showProgress;
				materializeFrom: aStream binary) root ].
]]]



%=========================================================================% 
!! Managing Globals
@ManagingGlobals


Let us assume a ==CompiledMethod== is referenced from the graph to serialize. Sometimes we may be interested in storing just the selector and name of the class, because we know it will be present when materializing the graph. However, sometimes we want to really store the method with full detail. This means that given an object graph, there is not a unique way of serializing it. Fuel offers dynamic and static mechanisms to customize this.

!!!Default globals

By default, Fuel considers the following objects as globals, i.e., it will store just their name:

- ==nil==, ==true==, ==false==, and ==Smalltalk globals==.
- Any ==Class==, ==Trait==, ==Metaclass== or ==ClassTrait==.
- Any ==CompiledMethod== (except when either it answers false to the message ==isInstalled== or true to the message ==isDoIt==, for example, the code is evaluated from Workspace).
- Some well-known global variables: ==Smalltalk==, ==SourceFiles==, ==Transcript==, ==Undeclared==, ==Display==, ==TextConstants==, ==ActiveWorld==, ==ActiveHand==, ==ActiveEvent==, ==Sensor==, ==Processor==, ==ImageImports==, ==SystemOrganization== and ==World==.

@@authorToDo SD: is the line on compiled method correct

!!!Custom globals are duplicated on materialization

With this following code snippet, we show that by default a global value is not serialized as a global. In such a case it is duplicated on materialization.

[[[language=Smalltalk
"Define a global variable named SomeGlobal."
SomeGlobal := Set new.

"Serialize and materialize the value of SomeGlobal."
FLSerializer 
	serialize: SomeGlobal 
	toFileNamed: 'g.fuel'.

"The materialized object *is not* the same as the global instance."
[ (FLMaterializer materializeFromFileNamed: 'g.fuel') ~~ SomeGlobal ] assert.
]]]

The following explains how we can tell Fuel to handle a new globals and how to avoid global duplication on materialization. 

!!!How to avoid duplication

The message ==considerGlobal:== is used to specify that an object should be stored as global, i.e. it shoul only be referenced by name.

[[[language=Smalltalk
| aSerializer |

"Define a global variable named SomeGlobal."
SomeGlobal := Set new.

aSerializer := FLSerializer newDefault.

"Tell the serializer to consider SomeGlobal as global."
aSerializer analyzer considerGlobal: SomeGlobal.

aSerializer 
	serialize: SomeGlobal 
	toFileNamed: 'g.fuel'.

"In this case, the materialized object *is* the same as the global instance."
[ (FLMaterializer materializeFromFileNamed: 'g.fuel') == SomeGlobal ] assert.
]]]

This feature is tested in the test within the ==tests-globals== protocol of ==FLBasicSerializationTest== and in the tests of ==FLGlobalEnvironmentTest==.

!!!Changing the environment

It is possible to specify where the global will be looked-up during materialization. The default lookup location is ==Smalltalk globals==. The message ==globalEnvironment:== exists for that purpose, as the following example shows. 

[[[language=Smalltalk
| aSerializer aMaterializer anEnvironment |

"Define a global variable named SomeGlobal."
SomeGlobal := Set new.

"Tell the serializer to consider SomeGlobal as global."
aSerializer := FLSerializer newDefault.
aSerializer analyzer considerGlobal: #SomeGlobal.
aSerializer 
	serialize: SomeGlobal 
	toFileNamed: 'g.fuel'.

"Override value for SomeGlobal."
anEnvironment := Dictionary newFrom: Smalltalk globals.
anEnvironment at: #SomeGlobal put: {42}.

"In this case, the materialized object *is the same* as the global instance."
'g.fuel' asFileReference writeStreamDo: [ :aStream |
	| materializedGlobal |
	aStream binary.
	aMaterializer := FLMaterializer newDefault.

	"Set the environment"
	aMaterializer globalEnvironment: anEnvironment.
	
	materializedGlobal := (aMaterializer materializeFrom: aStream) root.

	[ materializedGlobal = {42} ] assert.
	[ materializedGlobal == (anEnvironment at: #SomeGlobal) ] assert ].
]]]

This feature is tested in the class ==FLGlobalEnvironmentTest==. The same technique can be use to set the global environment during serialization.


%=========================================================================% 

!! Customizing the Graph
When serializing an object you often want to select which state should be serialized. With Fuel you can selectively ignore instance variables.

!!!Ignoring Instance Variables

Under certain conditions it may be desirable to prevent serialization of certain instance variables. A practical way to do this is to override the hook method ==fuelIgnoredInstanceVariableNames==. 

Let's say we have the class ==User== and we do not want to serialize the instance variables =='accumulatedLogins'== and =='applications'==. So we implement:

[[[language=Smalltalk
User class >> fuelIgnoredInstanceVariableNames
	^ #('accumulatedLogins' 'applications')
]]]

When materialized, such instance variables will point to ==nil==. If you want to re-initialize and set values to those instance variables, you can use the message ==fuelAfterMaterialization== for that (see the next section).

Be aware that if your rname an instance variable you need to update that name in ==fuleAfterMaterialization== too. Notice also that the method ==fuelIgnoredInstanceVariableNames== is implemented on the class side. This means that ""all"" instances of such class will ignore the defined instances variables when serialized. 

We test this feature in ==FLIgnoredVariablesTest==.

%In ==StOMP== serializer this same hook is called ==stompTransientInstVarNames== and in ==SIXX== it is ==sixxIgnorableInstVarNames==. 

!!!Post-Materialization Action

The message ==fuelAfterMaterialization== lets you execute some action once an object has been materialized. For example, let's say we would like to set back the instance variable =='accumulatedLogins'== during materialization. We can implement:

[[[language=Smalltalk
User >> fuelAfterMaterialization
	 accumulatedLogins := 0.
]]]

!!!Substitution on Serialization

Sometimes you may want to serialize something different than the original object, without altering it. Fuel proposes two different ways to do this.

!!!!Dynamic way

You can establish a pluggable substitution for a particular serialization. Let's illustrate with an example, where your graph includes a ==Stream== and you want to serialize ==nil== instead. 

[[[language=Smalltalk
objectToSerialize :=
	Array
		with: 'hello'
		with: '' writeStream.

'demo.fuel' asFileReference writeStreamDo: [ :aStream |
	aSerializer := FLSerializer newDefault.
	aSerializer analyzer
		when: [ :object | object isStream ]
		substituteBy: [ :oobject | nil ].
	aSerializer
		serialize: objectToSerialize
		on: aStream binary ].
]]]

So, when loading you will get ==#('hello' nil)==, without the instance of a ==Stream==. You can find the test for this code in ==FLUserGuidesTest>>testPluggableSubstitution==.

!!!! Static way
You can also do substitution more systematically by overriding the method ==fuelAccept:== in the class of the object to be substituted. Fuel visits each object in the graph by sending this message to determine how to trace and serialize it. Note that this will affect every serialization, whereas the dynamic way we explained above applies only to a single serialization. However, especially for large graphs, the static way can be much faster.

As an example, imagine we want to replace an object directly with nil. In other words, we want to make a whole object transient, say ==CachedResult==. For that, we should implement:

[[[language=Smalltalk
CachedResult >> fuelAccept: aGeneralMapper
	^ aGeneralMapper
		visitSubstitution: self
		by: nil
]]]

As another example, we have a ==Proxy== class and when serializing we want to serialize its ==target== instead of the proxy. So we redefine ==fuelAccept:== as follows:

[[[language=Smalltalk
Proxy >> fuelAccept: aGeneralMapper
	^ aGeneralMapper
		visitSubstitution: self
		by: target
]]]

There is another use for overriding ==fuelAccept:== and that is to decide about serializtion conditionally. Let's imagine that we have again the class ==User== and we want to ==nil== the instance variable =='history'== when its size is greater than 100.

[[[language=Smalltalk
User >> fuelAccept: aGeneralMapper
	^ self history size > 100
		ifTrue: [ 
			aGeneralMapper 
				visitSubstitution: self 
				by: (self copy history: #()) ].
		ifFalse: [ super fuelAccept: aGeneralMapper ]
]]]

; Note
: We are substituting the original user by another instance of ==User==, which Fuel will visit with the same ==fuelAccept:== method. We could easily fall into an infinite sequence of substitutions if we don't take care. To avoid this problem, it is useful to use the message ==visitSubstitution:by:onRecursionDo:==, where you define an alternative mapping for the case of mapping an object which is already a substitute of another one:

[[[language=Smalltalk
User >> fuelAccept: aGeneralMapper
	aGeneralMapper 
		visitSubstitution: self 
		by: (self copy history: #())
		onRecursionDo: [ super fuelAccept: aGeneralMapper ]
]]]

In this case, the substituted user (i.e., the one with the empty history) will be visited via its super implementation.

You can find the tests for this functionality in the class ==FLHookedSubstitutionTest==.


!!! Substitution on Materialization
In the same way that we may want to customize object serialization, we may want to customize object materialization.

!!!! Global Sends

Suppose we have a special instance of ==User== that represents the admin user, and it is a unique instance in the image. In the case that the admin user is referenced in our graph, we want to treat that object as a global. We can do that in this way:

[[[language=Smalltalk
User >> fuelAccept: aGeneralMapper
	^ self == User admin
		ifTrue: [
			aGeneralMapper
				visitGlobalSend: self
				name: #User 
				selector: #admin ]
		ifFalse: [ super fuelAccept: aGeneralMapper ]
]]]

What will happen is that, during serialization, the admin user won't be completely serialized (with all its intsance variables) but instead its global name and selector are stored. Then, at materialization time, Fuel will send the message ==admin== to the class ==User==, and use the returned value as the admin user of the materialized graph.

We test this feature in ==FLGlobalSendSerializationTest==.

!!!! Hooking instance creation

Fuel provides two hook methods to customise how instances are created: ==fuelNew== and ==fuelNew:==.

For (regular) fixed objects, the method ==fuelNew== is defined in ==Behavior== as:

[[[language=Smalltalk
fuelNew
	^ self basicNew
]]]

But we can override it to our needs, for example:

[[[language=Smalltalk
fuelNew
	^ self uniqueInstance
]]]

This similarly applies to variable sized objects through the method ==fuelNew:== which by default sends ==basicNew:==.

We test this feature in ==FLSingletonTest==.

!!!Not Serializable Objects

You may want to be sure that some objects are not part of the graph during serialization. Fuel provides the hook method named ==visitNotSerializable:== which signals an ==FLNotSerializable== exception if such an object is found in the graph that is to be serialized.

[[[language=Smalltalk
MyNotSerializableObject >> fuelAccept: aGeneralMapper
	aGeneralMapper visitNotSerializable: self
]]]

We test this feature in ==FLBasicSerializationTest>>testNotSerializableObject==.


%=========================================================================% 

!! Errors

We provide a hierarchy of errors which allows one to clearly identify the problem when something went wrong:

- ==FLError==
-- ==FLSerializationError==
--- ==FLNotSerializable==
--- ==FLObjectNotFound==
--- ==FLObsolete==
-- ==FLMaterializationError==
--- ==FLBadSignature==
--- ==FLBadVersion==
--- ==FLClassNotFound==
--- ==FLGlobalNotFound==
--- ==FLMethodChanged==
--- ==FLMethodNotFound==

As most classes of Fuel, they have class comments that explain their purpose:

; FLError
: I represent an error produced during Fuel operation.

; FLSerializationError
: I represent an error happened during serialization.

; FLNotSerializable
: I represent an error which may happen while tracing in the graph an object that is forbidden of being serialized.

; FLObjectNotFound
: I represent an error which may happen during serialization, when trying to encode on the stream a reference to an object that should be encoded before, but it is not. This usually happens when the graph changes during serialization. Another possible cause is a bug in the analysis step of serialization.

; FLObsolete
: I am an error produced during serialization, signaled when trying to serialize an obsolete class as global. It is a prevention, because such class is likely to be absent during materialization.

; FLMaterializationError
: I represent an error happened during materialization.

; FLBadSignature
: I represent an error produced during materialization when the serialized signature doesn't match the materializer's signature (accessible via ==FLMaterializer>>signature==). A signature is a byte prefix that should prefix a well-serialized stream.

; FLBadVersion
: I represent an error produced during materialization when the serialized version doesn't match the materializer's version (accessible via ==FLMaterializer>>version==). A version is encoded in 16 bits and is encoded heading the serialized stream, after the signature.

; FLClassNotFound
: I represent an error produced during materialization when a serialized class or trait name doesn't exist.

; FLGlobalNotFound
: I represent an error produced during materialization when a serialized global name doesn't exist (at ==Smalltalk globals==).

; FLMethodChanged
: I represent an error produced during materialization when is detected a change in the bytecodes of a method serialized as global. This error was born when testing the materialization of a ==BlockClosure== defined in a method that changed. The test produced a VM crash.

; FLMethodNotFound
: I represent an error produced during materialization when a serialized method in a class or trait name doesn't exist (at ==Smalltalk globals==).


%=========================================================================% 

!! Object Migration
We often need to load objects whose class has changed since it was saved. Figure *figClassChanges* illustrates typical changes to the class shape. Imagine we serialized an instance of ==Point== and we need to materialize it when ==Point== class has changed.

+Example of changes to a class>file://figures/ClassChanges.png|width=70|label=figClassChanges+


@@authorToDo SD stopped here


Let's start with the simple cases. If a variable was ""inserted"", its value will be ==nil==. If ""removed"", it is also obvious: the serialized value will be ignored. ""Order change"" of instance variables is handled by Fuel automatically.

A more interesting case is when a variable was ""renamed"". Fuel cannot automatically guess the new name of a variable but the user can tell Fuel about the renamed variables by using the message ===migratedClassNamed:variables:==. The user should provide a mapping from old names to new ones as shown in the following example:

[[[language=Smalltalk
FLMaterializer newDefault
	migrateClassNamed: #Point
	variables: {'x' -> 'posX'. 'y' -> 'posY'}.
]]]

Not surprisingly, if nothing is specified, the change will be understood by Fuel as two independent operations: an insertion and a removal.

The last change that can happen is a ""class rename"". Again Fuel provides a way to handle this case using the message ==migrateClassNamed:toClass:==.

[[[language=Smalltalk
FLMaterializer newDefault
	migrateClassNamed: #Point
	toClass: Coordinate.
]]]

Fuel defines the message ==migrateClassNamed:toClass:variables:== that combines both ""class and variable rename"".

Although not illustrated in the figure, a class could also change its ""layout"". For example, Point could change from being ""fixed"" to ""variable"". Layout changes from fixed to variable format are automatically handled by Fuel. Unfortunately, the inverse (variable to fixed) is not supported so far.

You can find tests related to different kinds of migrations in ==FLMigrationTest==.

Additionally, the method ==globalEnvironment:==, showed in Section *ManagingGlobals*, is useful for migrations: you can prepare an ad-hoc environment dictionary with the same keys that were used during serialization, but with the new classes as values.


%=========================================================================% 

!! Fuel Format Migration

Until now, each Fuel version has its own stream format. Furthermore, each version is ""not"" compatible with the others. This means that when upgrading Fuel, we will need to convert our serialized streams. 

We include below an example of such a format migration. Let's say we have some files serialized with Fuel 1.7 in a Pharo 1.4 image and we want to migrate them to Fuel 1.9.

[[[language=Smalltalk
| oldVersion newVersion fileNames objectsByFileName
	materializerClass serializerClass |
oldVersion := '1.7'.
newVersion := '1.9'.
fileNames := #('a.fuel' 'b.fuel' 'c.fuel' 'd.fuel' 'e.fuel').
objectsByFileName := Dictionary new.

(ConfigurationOfFuel project version: oldVersion) load.
materializerClass := Smalltalk at: #FLMaterializer.

fileNames do: [ :fileName | 
	objectsByFileName 
		at: fileName 
		put: (materializerClass materializeFromFileNamed: fileName) ].

(ConfigurationOfFuel project version: newVersion) load.
serializerClass := Smalltalk at: #FLSerializer.

objectsByFileName keysAndValuesDo: [ :fileName :objects |
	serializerClass 
		serialize: objects	
		toFileNamed: 'migrated-', fileName ].
]]]

@@note Note 1: We assume in this example that the number of objects to migrate can be materialized all together at the same time. This assumption may be wrong. In such case, you could adapt the script to split the list of files and do the migration in parts.

@@note Note 2: It is necessary to fetch the classes in the System Dictionary after the desired Fuel version has been loaded.

@@note Note 3: This script should be evaluated in the original image. For example, we don't guarantee that Fuel 1.7 loads in Pharo 2.0, but we know that Fuel 1.9 loads in Pharo 1.4.

%=========================================================================% 

!! Debugging

There are a couple of packages that help us debugging Fuel. To understand the output of the tools, you should know some basics of how Fuel works internally.

!!!Serialization
The most important thing to know is that serialization is split in two main steps: analysis and encoding.

!!!!Analysis
The analysis phase consists of walking the graph from the specified root object and mapping each traversed object to its corresponding groupi, called a ""cluster"". 

!!!!Encoding
After analysis, we write the graph to the stream linarly, in these steps:

#header
#for each cluster, instances part
#for each cluster, references part
#trailer

!!!Materialization
Because of the extra effort put into serialization, we can materialize the graph in a single phase.

!!!!Decoding
We decode the graph by reading the input stream linearly, in the same order it was written. The materialization steps are obviously analogous to the ones above:

#header
#for each cluster, instances part
#for each cluster, references part
#trailer

It is important to understand that references are ""not"" stored together with their objects. Instead, all instances are stored together and all references are stored together, after the references. We use this to materialize all the references in a single step, when we know that all the objects have already been materialized.

!!!Debug Tools
Ensure you have them with:

[[[language=Smalltalk
	Gofer it
		url: 'http://smalltalkhub.com/mc/Pharo/Fuel/main';
		package: 'ConfigurationOfFuel';
		load.

(ConfigurationOfFuel project version: #stable) 
	load: #(FuelDebug FuelPreview).
]]]

Here is a list of some useful class comments. 


!!!!FLGraphViewBuilder
I add draw capabilities to analysis in ==FuelDebug== package.

Right-click a node to inspect it. Some examples:

[[[language=Smalltalk
(FLAnalyzer newDefault
	setDebug;
	analysisFor: #((1) (2) (3) (4)))
	open.
]]]

[[[language=Smalltalk
(FLAnalyzer newDefault
	setDebug;
	analysisFor: #((1) (2) (3) (4)))
	openPathsTo: 3.

(FLAnalyzer newDefault
	setDebug;
	analysisFor: #((1) (2) (3) (4)))
	openPathsToEvery: [ :object |
		object isNumber and: [ object > 2 ] ].
]]]

Figure *figFuelPreview* shows how they look like.

+Visual preview of graph to be serialized>file://figures/FuelPreview.png|width=60|label=figFuelPreview+
_

!!!!FLDebugSerialization
I am a serialization which facilitates debugging, by logging the stream position before and after main steps of ==FLSerialization==, including cluster information. Obviously, you should be familiar with the algorithm to understand the output log.

To use, send the message ==setDebug== to your serializer and run as usual. For example:

[[[language=Smalltalk
'debug.fuel' asFileReference writeStreamDo: [ :aStream |
	FLSerializer newDefault
		setDebug;
		serialize: 'hello' on: aStream binary ].
]]]

Then, inspect the output log:

[[[language=Smalltalk
FLDebugSerialization last log.
]]]

!!!!FLDebugMaterialization
I am a materialization which facilitates debugging, by logging the stream position before and after main steps of ==FLMaterialization==, including cluster information. Obviously, you should be familiar with the algorithm to understand the output log.

To use, send the message ==setDebug== to your materializer and run as usual. For example:

[[[language=Smalltalk
'debug.fuel' asFileReference readStreamDo: [ :aStream |
	FLMaterializer newDefault
		setDebug;
		materializeFrom: aStream binary ].
]]]

Then, inspect the output log:

[[[language=Smalltalk
FLDebugMaterialization last log.
]]]


%=========================================================================% 

!! Built-in Header Support

Since the serialized graph of objects can be large, and since it can be useful to store additional information with the serialized graph, Fuel supports the possibility to add such information to a header. The following example shows this feature: first we add a property called timestamp to the header using the message ==at:putAdditionalObject:==. We then define some pre and post actions. In particular we show how we can use the property value, using the message ==additionalObjectAt:== 
 
[[[language=Smalltalk
| serializer |
serializer := FLSerializer newDefault.

serializer header 
	at: #timestamp
	putAdditionalObject: TimeStamp now.

serializer header
	addPreMaterializationAction: [ 
		Transcript show: 'Before serializing'; cr ].

serializer header
	addPostMaterializationAction: [ :materialization | 
		Transcript 
			show: 'Serialized at ';
			show: (materialization additionalObjectAt: #timestamp); 
			cr;
			show: 'Materialized at ';
			show: TimeStamp now; 
			cr ].
	
serializer 
	serialize: 'a big amount of data' 
	toFileNamed: 'demo.fuel'
]]]

Then, you can just materialize the header info:

[[[language=Smalltalk
| aHeader |
aHeader := FLMaterializer materializeHeaderFromFileNamed: 'demo.fuel'.
aHeader additionalObjectAt: #timestamp.
]]]

Printing it, the result is:

[[[language=Smalltalk
'28 March 2013 12:44:54 pm'
]]]

If we materialize the whole file with:

[[[language=Smalltalk
FLMaterializer materializeFromFileNamed: 'demo.fuel' 
]]]

Then, the print string of the results is:

[[[language=Smalltalk
'a big amount of data'
]]]

And this is shown in ==Transcript==:

[[[language=Smalltalk
Before serializing
Serialized at 28 March 2013 12:50:50 pm
Materialized at 28 March 2013 1:01:21 pm
]]]
 
For additional examples, look at the tests in ==FLHeaderSerializationTest==.


!! Conclusion

Fuel is a fast and stable binary object serializer. Some people use Fuel to get information when an error occurs in an application that they deployed to a client. In such a case, they serialize the full stack and once they get the file they just load it and open a debugger on the saved stack. Fuel has been covered by scientific publications that you can find at *http://rmod.lille.inria.fr* and you can find more information about Fuel on the following web site: *http://rmod.inria.fr/web/software/Fuel*.
