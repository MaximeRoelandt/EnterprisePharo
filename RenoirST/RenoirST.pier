!Cascading Style Sheets with RenoirSt
@cha:renoirst

RenoirST is a DSL enabling programmatic cascading style sheet generation for Pharo developed by Gabriel Omar Cotelli.

The goals of RenoirST are to improve CSS integration with existing web frameworks
and to be able to write and refactor code in Pharo and deploy to CSS. Renoir features are:
common properties declaration, CSS3 selector support, important rules and media queries support.
In this tutorial we will present the key features of RenoirSt with a large set of examples.
This tutorial assumes some knowledge of CSS and Pharo Smalltalk. For a little introduction about CSS you can read the 
*Seaside's book CSS chapter>http://book.seaside.st/book/fundamentals/css*.

!!Getting started

To load the library in your image, evaluate:

[[[
Gofer it
  url: 'http://smalltalkhub.com/mc/gcotelli/RenoirSt/main';
  configurationOf: 'RenoirSt';
  loadStable
]]]

or download a ready to use image from the *Pharo contribution CI Server>https://ci.inria.fr/pharo-contribution/job/RenoirSt*.


The main entry point for the library is the class ==CascadingStyleSheetBuilder==. In a workspace, inspect the result of the following expression:

[[[
CascadingStyleSheetBuilder new build
]]]

You now have an inspector on your first (empty and useless) style sheet. Real stylesheets are composed of rules (or rule-sets), where each one has a selector 
and a declaration group. The selector determines if the rule applies to some element in the DOM, and the declaration group specifies the style to apply.

Our first useful style sheet will simply assign a margin to every div element in the DOM.

[[[
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div ]
  with: [ :style | style margin: 2 px ];
  build
]]]

the expected result in CSS is:

[[[
div
{
  margin: 2px;
}
]]]

The message ==declareRuleSetFor:with:== is used to configure a rule-set in the builder. The message requires two blocks: the first block defines the selector
and the second defines the style to apply to elements matching the selector. The ==selector== argument of the first block is an entry point to construct the 
selector (more on this later). The ==style== argument of the second block is an entry point to declare CSS properties and values.

The properties API is mostly defined following this rules:

- Properties without dashes in the name are directly mapped: the margin CSS property is mapped to a ==margin:== message send.
- Properties with one or more dashes are mapped using camel case: the margin-top CSS property is mapped to the ==marginTop:== message send.

!!Defining the rules

We now present how the various CSS rules can be expressed with RenoirSt. RenoirSt supports many CSS types, comments, and even functional notation.

!!!Basic CSS Types

!!!!Lengths, Angles, Times and Frequencies

The library provides out-of-the-box support for the length, angle, time and frequency units in the CSS spec. There are extensions for ==Integer== and ==Float== 
classes allowing to obtain lengths.

The supported length units are:
- ==em== relative to font size
- ==ex== relative to "x" height
- ==ch== relative to width of the zero glyph in the element's font
- ==rem== relative to font size of root element
- ==vw== 1% of viewport's width
- ==vh== 1% of viewport's height
- ==vmin== 1% of viewport's smaller dimension
- ==vmax== 1% of viewport's larger dimension
- ==cm== centimeters
- ==mm== millimeteres
- ==in== inches
- ==pc== picas
- ==pt== points
- ==px== pixels (note that CSS has some special definition for pixel)

The supported angle units are:
- ==deg== degrees
- ==grad== gradians
- ==rad== radians
- ==turn== turns

The supported time units are:
- ==s== seconds
- ==ms== milliseconds

The supported frequency units are:
- ==Hz== Hertz
- ==kHz== KiloHertz

RenoirST also supports the creation of percentages: ==50 percent== is mapped to ==50%== in the resulting CSS.

Some properties require integer or floating point values. In these cases just use the standard Pharo integer and float support. For example:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div ]
  with: [ :style | style zIndex: 2 ];
  build
]]]

!!!!Colors

The library supports abstractions for properties requiring color values. The shared pool ==CssSVGColors== provides easy access to colors in the SVG 1.0 list, 
and the abstractions ==CssRGBColor== and ==CssHSLColor== allow the creation of colors in the RGB and HSL spaces including alpha support.


For example,

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div ]
  with: [ :style |
    style
      backgroundColor: CssSVGColors aliceBlue;
      borderColor: (CssRGBColor red: 0 green: 128 blue: 0 alpha: 0.5)];
  build
]]]

evaluates to:

[[[language=css
div
{
    background-color: aliceblue;
    border-color: rgba(0,128,0,0.5);
}
]]]

@@note In a real scenario you should avoid hard coding colors as in the examples. It is recommended to put colors in objects representing a theme or something 
that gives them a name related to your application.

RGB-Colors also support percentage values:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div ]
  with: [ :style |
    style borderColor: (CssRGBColor red: 0 percent green: 50 percent blue: 0 percent) ];
  build
]]]

evaluates to:

[[[language=css
div
{
    border-color: rgb(0%,50%,0%);
}
]]]

Notice the difference in the used message because there is no alpha channel specification.

!!!!Constants

A lot of values for CSS properties are just keyword constants. This support is provided by the classes ==CssConstants== and ==CssFontConstants==.

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div ]
  with: [ :style | style textAlign: CssConstants justify ];
  build
]]]

evaluates to:

[[[language=css
div
{
    text-align: justify;
}
]]]

!!!!Several Property Values

Some properties support a wide range of values. For example the ==margin== property can have 1, 2 , 3 or 4 values specified. If you only need one value, just 
pass it as a parameter. For more than one value, use an array:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div ]
  with: [ :style | style margin: { 2 px. 4 px } ];
  build
]]]

evaluates to:

[[[language=css
div
{
    margin: 2px 4px;
}
]]]

!!!!URLs

==ZnUrl== instances can be used as the value for properties requiring an URI. Both relative and absolute URLs are accepted.

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div class: 'logo' ]
  with: [ :style | style backgroundImage: 'images/logo.png' asZnUrl ];
  declareRuleSetFor: [ :selector | selector div class: 'logo' ]
  with: [ :style | style backgroundImage: 'http://www.example.com/images/logo.png' asZnUrl ];
  build
]]]
Evaluates to:
[[[language=css
div.logo
{
    background-image: url("images/logo.png");
}

div.logo
{
    background-image: url("http://www.example.com/images/logo.png");
}
]]]

!!!Comments

When declaring rule sets, the library supports attaching comments to them with the ==declareRuleSetFor:with:andComment:== message:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div ]
  with: [ :style | style margin: 2 pc ]
  andComment: 'Two picas margin';
  build
]]]

evaluates to:

[[[language=css
/*Two picas margin*/
div
{
    margin: 2pc;
}
]]]

RenoirST also supports defining stand-alone comments (not attached to any rule):

[[[language=smalltalk
CascadingStyleSheetBuilder new
  comment: 'A general comment';
  build
]]]

evaluates to:

[[[language=css
/*A general comment*/
]]]

!!!Functional Notation

A functional notation is a type of CSS component value that can represent complex types or invoke special processing. The mathematical expressions, toggling 
between values, attribute references, and gradients are all supported in RenoirST.

!!!!Mathematical Expressions

The library provides support for math expressions using the  ==CssMathExpression== abstraction:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div ]
  with: [ :style | style margin: (CssMathExpression on: 2 pc) / 3 + 2 percent ];
  build
]]]

evaluates to:

[[[language=css
div
{
    margin: calc(2pc / 3 + 2%);
}
]]]

!!!!Toggling Between Values

To let descendant elements cycle over a list of values instead of inheriting the same value, one can use the ==CssToggle== abstraction:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector unorderedList unorderedList ]
  with: [ :style | style listStyleType: (CssToggle cyclingOver: { CssConstants disc. CssConstants circle. CssConstants square}) ];
  build
]]]

evaluates to:

[[[language=css
ul ul
{
    list-style-type: toggle(disc, circle, square);
}
]]]

!!!!Attribute References

The ==attr()== function is allowed as a component value in properties applied to an element or pseudo-element. The function returns the value of an attribute on 
the element. If used on a pseudo-element, it returns the value of the attribute on the pseudo-element's originating element. This function is supported using 
the ==CssAttributeReference== abstraction. This function can be used simply providing an attribute name:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div before ]
  with: [ :style | style content: (CssAttributeReference toAttributeNamed: 'title') ];
  build
]]]
Evaluates to:
[[[language=css
div::before
{
    content: attr(title string);
}
]]]

RenoirST allows for providing the type or unit of the attribute (if no type or unit is specified the ==string== type is assumed):

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div  ]
  with: [ :style |
    style width: (CssAttributeReference
      toAttributeNamed: 'height'
      ofType: CssLengthUnits pixels) ];
  build
]]]

evaluates to:

[[[language=css
div
{
    width: attr(height px);
}
]]]

Additionally, it is possible to provide a value to use when the attribute is absent:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div before ]
  with: [ :style |
    style content: (CssAttributeReference
      toAttributeNamed: 'title'
      ofType: 'string'
      withFallback: '"Missing title"') ];
  build
]]]

evaluates to:

[[[language=css
div::before
{
    content: attr(title string, "Missing title");
}
]]]

!!!!Gradients

A gradient is an image that smoothly fades from one color to another. Gradients are commonly used for subtle shading in background images, buttons, and many 
other places. The gradient notations described in this section allow an author to specify such an image in a terse syntax. This notation is supported using 
==CssLinearGradient== and ==CssRadialGradient== asbtractions.

To represent a simple linear gradient from a color to another, send the ==fading:== message to ==CssLinearGradient== with the two colors in an array as a parameter:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div ]
  with: [ :style | style background: (CssLinearGradient
    fading: { CssSVGColors yellow. CssSVGColors blue }) ]
]]]

Above code evaluates to:

[[[language=css
div
{
    background: linear-gradient(yellow, blue);
}
]]]

By default, a gradient's direction is from top to bottom. To specify a different direction, the author can use the ==to:fading:== message instead:

[[[language=smalltalk
CssLinearGradient
  to: CssConstants right
  fading: { CssSVGColors yellow. CssSVGColors blue }
]]]

Above code will result in a gradient with yellow on the left side and blue on the right side. The equivalent CSS is:

[[[language=css
linear-gradient(to right, yellow, blue);
]]]

To specify a diagonal direction, an array must be passed as the ==to:== argument:

[[[language=smalltalk
CssLinearGradient
  to: { CssConstants top. CssConstants right }
  fading: { CssSVGColors yellow. CssSVGColors blue }
]]]

Above code will result in a gradient with blue in the top right corner and yellow in the bottom left one. The equivalent CSS is:

[[[language=css
linear-gradient(to top right, yellow, blue);
]]]

Directions can also be specified as an angle by sending the ==rotated:fading:== message:

[[[language=smalltalk
CssLinearGradient
  rotated: 45 deg
  fading: { CssSVGColors yellow. CssSVGColors blue }
]]]

Above code maps to:

[[[language=css
linear-gradient(45deg, yellow, blue);
]]]

Gradients can be fine-tuned by manipulating so-called color stops:

[[[language=smalltalk
CssLinearGradient
  to: CssConstants right
  fading: {
    CssSVGColors yellow.
    CssColorStop for: CssSVGColors blue at: 30 percent }
]]]

Above code maps to:

[[[language=css
linear-gradient(to right, yellow, blue 30%);
]]]

This results in a linear gradient from left to right with yellow at the left side and plain blue from 30% (of the horizontal line) to the right side. More than 
two colors can be passed as argument to ==fading:==. This can be used to create rainbows for example:

[[[language=smalltalk
CssLinearGradient
  to: CssConstants right
  fading: {
    CssSVGColors red.
    CssSVGColors orange.
    CssSVGColors yellow.
    CssSVGColors green.
    CssSVGColors blue.
    CssSVGColors indigo.
    CssSVGColors violet.
  }
]]]

This maps to:

[[[language=css
linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet);
]]]

To create radial gradients, the author must send messages to ==CssRadialGradient==. For example,

[[[language=smalltalk
CssRadialGradient fading: { CssSVGColors yellow. CssSVGColors green }
]]]

maps to:

[[[language=css
radial-gradient(yellow,green)
]]]

This results in a radial gradient with yellow at the center and green all around. Coordinates can be passed to both the first and second parameters of the 
==elliptical:at:fading:== message:

[[[
(CssRadialGradient
  elliptical: {20 px. 30 px}
  at: { 20 px. 30 px}
  fading: { CssSVGColors red. CssSVGColors yellow. CssSVGColors green })
]]]

This maps to:
[[[language=css
    background: radial-gradient(20px 30px ellipse at 20px 30px, red, yellow, green);
]]]

To make the gradient repeatable, just send to it the message ==beRepeating==. For Example:
[[[language=smalltalk
(CssRadialGradient fading: { CssSVGColors yellow. CssSVGColors green }) beRepeating
]]]
renders as:
[[[language=css
repeating-radial-gradient(yellow, green);
]]]

!!Defining the selectors

So far our focus was on the ''style'' part of the rule. Let's focus now on the available ''selectors''. Remember that a CSS selector represents a structure used to match elements in the document tree. This chapter asume some familiarity with the CSS selectors and will not go in detail about the exact meaning of each one. For more details you can take a look at *CSS3 selector documentation>http://www.w3.org/TR/css3-selectors*.

!!! Type selectors

These selectors match a specific element type in the DOM. The library provides out-of-the-box support for HTML elements, mostly using the same names than the *Seaside>http://seaside.st* framework. One example is the ==div== selector used in the previous chapter:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [ :selector | selector div ]
  with: [ :style | ... ];
  build
]]]

The following other example matches ==<ol>== (ordered list) elements:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector orderedList ]
  with: [ :style | ... ]
]]]

evaluating to:

[[[language=css
ol
{
  ...
}
]]]

!!! Combinators

Selectors can be combined to represent complex queries. One of the most common use cases is the ''descendant combinator'':

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector div orderedList ]
  with: [:style | ... ]
]]]

evaluating to:

[[[language=css
div ol
{
  ...
}
]]]

This only matches if an ==ol== element is a descendant (direct or not) of a ==div== element.

This ''child combinator'' only matches when an element is a direct child of an other one:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector div > selector orderedList ]
  with: [:style |  ]
]]]

evaluates to

[[[language=css
div > ol
{
  ...
}
]]]

''Siblings combinators'' can be created using ==\+== and ==\~==:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector div + selector orderedList ]
  with: [:style |  ]
]]]

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector div ~ selector orderedList ]
  with: [:style |  ]
]]]

Class selectors can be created by sending ==class:== and id selectors can be created by sending ==id:==. For example,

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | (selector div class: 'pastoral') id: #account5 ]
  with: [:style |  ]
]]]

evaluates to:

[[[language=css
div.pastoral#account5
{
  ...
}
]]]

@@note You should not hardcode the classes and ids, they should be obtained from the same object that holds them for the HTML generation. You probably have some code setting the class(es) and/or id(s) to a particular HTML element.

!!! Pseudo-Classes

The pseudo-class concept is introduced to allow selection based on information that lies outside of the document tree or that cannot be expressed using the simpler selectors. Most pseudo-classes are supported just by sending one of the following messages ==link==, ==visited==, ==active==, ==hover==, ==focus==, ==target==, ==enabled==, ==disabled== or ==checked==.

Here is a small example that uses the pseudo-classes:
[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector anchor link ]
  with: [:style | style color: CssSVGColors blue ];
  declareRuleSetFor: [:selector | selector anchor visited active]
  with: [:style | style color: CssSVGColors green ];
  declareRuleSetFor: [:selector | selector anchor focus hover enabled]
  with: [:style | style color: CssSVGColors green ];
  declareRuleSetFor: [:selector | (selector paragraph class: 'note') target disabled]
  with: [:style | style color: CssSVGColors green ];
  declareRuleSetFor: [:selector | selector input checked ]
  with: [:style | style color: CssSVGColors green ];
  build
]]]

evaluates to:

[[[language=css
a:link
{
    color: blue;
}

a:visited:active
{
    color: green;
}

a:focus:hover:enabled
{
    color: green;
}

p.note:target:disabled
{
    color: green;
}

input:checked
{
    color: green;
}
]]]

!!!! Language Pseudo-class:

The ==:lang(C)== pseudo-class can be used by sending the message ==lang:==:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | (selector lang: 'es') > selector div ]
  with: [:style | style quotes: { '"«"'. '"»"' }  ];
  build
]]]

evaluates to:

[[[language=css
:lang(es) > div
{
    quotes: "«" "»";
}
]]]

!!!! Structural Pseudo-classes
These selectors allow selection based on extra information that lies in the document tree but cannot be represented by other simpler selectors nor combinators.

The ==:root== pseudo-class represents an element that is the root of the document. To build this kind of selector just send the message ==root== to another selector:
[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector root ]
  with: [:style | style color: CssSVGColors grey ];
  build
]]]

evaluates to:

[[[language=css
:root
{
    color: grey;
}
]]]

The ==:nth-child(an+b)== pseudo-class notation represents an element that has ==an+b-1== siblings before it in the document tree, for any positive integer or 
zero value of ==n==, and has a parent element. For values of ==a== and ==b== greater than zero, this effectively divides the element's children into groups of ==a== elements (the last group taking the remainder), and selecting the ==b==th element of each group. The ==a== and ==b== values must be integers (positive, negative, or zero). The index of the first child of an element is 1.

In addition to this, ==:nth-child()== can take ==odd== and ==even== as arguments instead. The value ==odd== is equivalent to ==2n\+1==, whereas ==even== is equivalent to ==2n==.

RenoirST supports an abstraction for this kind of formulae (==CssLinealPolynomial==), or just an integer if ==n== is not required.

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector childAt: 3 n + 1 ]
  with: [:style | style color: CssSVGColors blue ];
  declareRuleSetFor: [:selector | selector childAt: 5 ]
  with: [:style | style color: CssSVGColors blue ];
  declareRuleSetFor: [:selector | selector childAt: CssConstants even]
  with: [:style | style color: CssSVGColors blue ];
  build
]]]

evaluates to:

[[[language=css
:nth-child(3n+1)
{
    color: blue;
}

:nth-child(5)
{
    color: blue;
}

:nth-child(even)
{
    color: blue;
}
]]]

@@authorToDo Damien: HERE

==CssLinealPolynomial== instances can be created by sending the message ==n== to an integer, and later this instances can receive the messages ==+== or ==-== to 
configure the independent coefficient.

Some examples:
[[[language=smalltalk
1 n "Prints as: n".
2 n -3 "Prints as: 2n-3".
3 n + 1 "Prints as: 3n+1"
]]]

The rest of the selectors in this category are modeled using the following messsages:
- ==nth-last-child()== -> ==childFromLastAt:==
- ==nth-of-type()== -> ==siblingOfTypeAt:==
- ==nth-last-of-type()== -> ==siblingOfTypeFromLastAt:==
- ==first-child== -> ==firstChild==
- ==last-child== -> ==lastChild==
- ==first-of-type== -> ==firstOfType==
- ==last-of-type== -> ==lastOfType==
- ==only-child== -> ==onlyChild==
- ==only-of-type== -> ==onlyOfType==
- ==empty== -> ==empty==

!!! Pseudo-Elements

Pseudo-elements create abstractions about the document tree beyond those specified by the document language. For instance, document languages do not offer 
mechanisms to access the first letter or first line of an element's content. Pseudo-elements allow authors to refer to this otherwise inaccessible information. 
Pseudo-elements may also provide authors a way to refer to content that does not exist in the source document.

!!!! First line
This selector describes the contents of the first formatted line of an element.

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector paragraph firstLine ]
  with: [:style | style textTransform: CssConstants uppercase ];
  build
]]]
[[[language=css
p::first-line
{
    text-transform: uppercase;
}
]]]

!!!! First letter

This pseudo-element represents the first letter of an element, if it is not preceded by any other content (such as images or inline tables) on its line.

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector paragraph firstLetter ]
  with: [:style | style fontSize: 200 percent ];
  build
]]]
[[[language=css
p::first-letter
{
    font-size: 200%;
}
]]]

!!!! Before and After

These pseudo-elements can be used to describe generated content before or after an element's content. The ==content== property, in conjunction with these 
pseudo-elements, specifies what is inserted.

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | (selector paragraph class: 'note') before ]
  with: [:style | style content: '"Note: "' ];
  declareRuleSetFor: [:selector | (selector paragraph class: 'note') after ]
  with: [:style | style content: '"[*]"' ];
  build
]]]
[[[language=css
p.note::before
{
    content: "Note: ";
}

p.note::after
{
    content: "[*]";
}
]]]

!!! Selector Groups

A comma-separated list of selectors represents the union of all elements selected by each of the individual selectors in the list. For example, in CSS when 
several selectors share the same declarations, they may be grouped into a comma-separated list.

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | (selector div class: 'note') after , (selector paragraph class: 'note') before ]
  with: [:style | style content: '"Note: "' ];
  build
]]]

[[[language=css
div.note::after ,
p.note::before
{
    content: "Note: ";
}
]]]

!! Important Rules

CSS attempts to create a balance of power between author and user style sheets. By default, rules in an author's style sheet override those in a user's style sheet.

However, for balance, an ==!important== declaration takes precedence over a normal declaration. Both author and user style sheets may contain ==!important== 
declarations, and user ==!important== rules override author ==!important== rules. This CSS feature improves accessibility of documents by giving users with 
special requirements control over presentation.

The library provides support for this feature by sending ==beImportantDuring:== message to the style. Let's see an example:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector paragraph ]
  with: [:style |
    style beImportantDuring: [:importantStyle |
      importantStyle
        textIndent: 1 em;
        fontStyle: CssConstants italic
    ].
    style fontSize: 18 pt.
  ];
  build
]]]
Evaluates to:
[[[language=css
p
{
    text-indent: 1em !important;
    font-style: italic !important;
    font-size: 18pt;
}
]]]
Note that the important properties must be created by sending the messages to the inner argument ==importantStyle== instead of the outer argument ==style==.

!!!!! References:
- http://www.w3.org/TR/CSS2/cascade.html#important-rules

!! Media Queries

A ==@media== rule specifies the target media types of a set of statements. The ==@media== construct allows style sheet rules that apply to various media in the 
same style sheet. Style rules outside of ==@media== rules apply to all media types that the style sheet applies to. At-rules inside ==@media== are invalid in 
CSS2.1.

The most basic media rule consists of specifying just a media type:
[[[language=smalltalk
CascadingStyleSheetBuilder new
    declare: [ :cssBuilder |
        cssBuilder
            declareRuleSetFor: [ :selector | selector id: #oop ]
            with: [ :style | style color: CssSVGColors red ]
        ]
    forMediaMatching: [ :queryBuilder | queryBuilder type: CssMediaQueryConstants print ];
    build
]]]

To use media queries in the library just send the message ==declare:forMediaMatching:== to the builder. The first closure is evaluated with an instance of a 
==CascadingStyleSheetBuilder== and the second one with a builder of media queries.

The media query builder will match any media type by default. To specify a media type just send it the message ==type:== with the corresponding media type. The 
class ==CssMediaQueryConstants== provides easy access to the following media types:
==braille==, ==embossed==, ==handheld==, ==print==, ==projection==, ==screen==, ==speech==, ==tty== and ==tv==.

The media query builder supports a variety of messages for additional conditions (called media features). Media features are used in expressions to describe 
requirements of the output device.

The following media feature messages are supported:
- Accepting a ==CssMeasure== with length units
    - ==width:==
    - ==minWidth:==
    - ==maxWidht:==
    - ==height:==
    - ==minHeight:==
    - ==maxHeight:==
    - ==deviceWidth:==
    - ==minDeviceWidth:==
    - ==maxDeviceWidth:==
    - ==deviceHeight:==
    - ==minDeviceHeight:==
    - ==maxDeviceHeight:==
- ==orientation:== accepting ==CssMediaQueryConstants portrait== or ==CssMediaQueryConstants landscape==
- Accepting fractions as aspect ratios
    - ==aspectRatio:==
    - ==minAspectRatio:==
    - ==maxAspectRatio:==
    - ==deviceAspectRatio:==
    - ==minDeviceAspectRatio:==
    - ==maxDeviceAspectRatio:==
- Accepting integers
    - ==color:== the argument describes the number of bits per color component of the output device
    - ==minColor:==
    - ==maxColor:==
    - ==colorIndex:== the argument describes the number of entries in the color lookup table of the output device
    - ==minColorIndex:==
    - ==maxColorIndex:==
    - ==monochrome:== the argument describes the number of bits per pixel in a monochrome frame buffer
    - ==minMonochrome:==
    - ==maxMonochrome:==
    - ==grid:== the argument must be 1 or 0
- Accepting a ==CssMeasure== with resolution units
    - ==resolution:==
    - ==minResolution:==
    - ==maxResolution:==
- ==scan:== accepting ==CssMediaQueryConstants progressive== or ==CssMediaQueryConstants interlace==

New units for resolutions are added using the ==CssMeasure== abstraction. This kind of measures can be created sending the messages ==dpi== (dots per inch), 
==dpcm== (dots per centimeter) or ==dppx== (dots per pixel unit) to an integer or float.

Let's see a final example to better understand the media features support:
[[[language=smalltalk
CascadingStyleSheetBuilder new
    declare: [ :cssBuilder |
        cssBuilder
            declareRuleSetFor: [ :selector | selector id: #oop ]
            with: [ :style | style color: CssSVGColors red ]
        ]
    forMediaMatching: [ :queryBuilder |
        queryBuilder
            orientation: CssMediaQueryConstants landscape;
            resolution: 300 dpi
        ];
    build
]]]
Evaluates to:
[[[language=css
@media all and (orientation: landscape) and (resolution: 300dpi)
{
    #oop
    {
        color: red;
    }
}
]]]
!!!!! References:
- http://www.w3.org/TR/CSS2/media.html
- http://www.w3.org/TR/css3-mediaqueries/

!! Vendor specific extensions

The library doesn't provide out of the box support for non standard properties. However since version ==1.4.0== the message ==vendorPropertyAt:put:== is 
available to ease the creation of this kind of properties by the end user.

For example:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector div ]
  with: [:style | style vendorPropertyAt: 'crazy-margin' put: 1 px ];
  build
]]]
Evaluates to:
[[[language=css
div
{
    crazy-margin: 1px;
    -moz-crazy-margin: 1px;
    -webkit-crazy-margin: 1px;
    -o-crazy-margin: 1px;
    -ms-crazy-margin: 1px;
}
]]]

@@note If you really want to use a vendor specific extension, It's better to create an extension method sending the ==vendorPropertyAt:put:== message.

!! Interaction with other frameworks and libraries

!!! Units

The ==Units== package (available using the ConfigurationBrowser in Pharo) includes some extensions that collides with RenoirSt.  Since version ==1.1.0== this 
library is able to load automatically a compatibility package if it's loaded after ==Units== package. To test this integration there's an 
[specific job](https://ci.inria.fr/pharo-contribution/job/RenoirSt-UnitsCompatibility/) in the contribution server, that loads first ==Units== and later ==RenoirSt==.
[![Build Status](https://ci.inria.fr/pharo-contribution/buildStatus/icon?job=RenoirSt-UnitsCompatibility)](https://ci.inria.fr/pharo-contribution/job/RenoirSt-UnitsCompatibility/)

!!! Seaside

The library includes an optional configuration called ==ConfigurationOfRenoirtStPlusSeaside== including some useful extensions. The [Seaside](www.seaside.st) 
framework includes your own class modeling URLs, when this configuration is loaded the instances of ==WAUrl== can be used in the properties requiring an URI:

[[[language=smalltalk
CascadingStyleSheetBuilder new
  declareRuleSetFor: [:selector | selector div class: 'logo' ]
  with: [:style | style backgroundImage: 'images/logo.png' seasideUrl ];
  build
]]]
Evaluates to:
[[[language=css
div.logo
{
    background-image: url("images/logo.png");
}
]]]

This optional configuration also loads extensions to ==CssDeclarationBlock== so it can be used as a ==JSObject== in plugins requiring some style parameter.

To load this extensions use the Configuration Browser or try something like:
[[[language=smalltalk
Gofer it
    url: 'http://smalltalkhub.com/mc/gcotelli/RenoirSt/main';
    configurationOf: 'RenoirStPlusSeaside';
    loadStable
]]]

There's an integration job in the CI server, testing this specific configuration: [![Build Status](https://ci.inria.fr/pharo-contribution/buildStatus/icon?job=RenoirSt-SeasideIntegration)](https://ci.inria.fr/pharo-contribution/job/RenoirSt-SeasideIntegration/).

For Pharo 4 there's no stable Seaside version yet so the integration job in the CI server loads the development version: [![Build Status](https://ci.inria.fr/pharo-contribution/buildStatus/icon?job=RenoirSt-SeasideIntegration-Pharo4)](https://ci.inria.fr/pharo-contribution/job/RenoirSt-SeasideIntegration-Pharo4/)
