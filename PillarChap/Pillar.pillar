{
    "title": "Documenting your Project with Pillar",
    "attribution": "Damien Cassou and Cyril Ferlicot Delbecque"
}
@cha:pillar


This documentation describes the version 1.0.0 of Pillar.

!!Introduction

*Pillar>http://www.smalltalkhub.com/#!/~Pier/Pillar* is a markup syntax and associated tools to write and generate documentation, books and presentations. Pillar is currently 
used to write the *Enterprise Pharo book>https://github.com/SquareBracketAssociates/EnterprisePharo* and other projects (see Section *@pillarUSERS*). The Pillar 
screenshot below (see Figure *@voyageDocExample*) shows a part of the 
*Voyage documentation>https://github.com/SquareBracketAssociates/EnterprisePharo/blob/master/Voyage/Voyage.pier* generated by Pillar.

+An example Pillar output>file://figures/voyageDocExample-small.png|label=voyageDocExample|width=30+

Pillar has many features:
- simple markup syntax with references, tables, pictures, captions...);
- export to HTML, LaTeX, Markdown and Pillar itself;
- export presentations to Beamer and Deck.js;
- customization of the export through a dedicated *STON>http://smalltalkhub.com/#!/~SvenVanCaekenberghe/STON* configuration file;
- support of templates using the *Mustache>http://smalltalkhub.com/#!/~NorbertHartl/Mustache* templating engine;
- syntax-highlighting of generated code blocks (not yet in LaTeX);
- configurable numbering of section titles and figures;
- ...

Pillar has also:
- a 5-minutes tutorial
- a documentation (in progress)
- a good test coverage (94% with more than a 2100 executed tests)
- a *continuous integration job>https://ci.inria.fr/pharo-contribution/job/Pillar*
- a command-line interface
- several existing use cases (see Section *@pillarUSERS*)
- a *cheat sheet>http://pillarhub.pharocloud.com/hub/pillarhub/pillarcheatsheet*


The original author of Pillar and current main contributor is *Damien Cassou>http://damiencassou.seasidehosting.st*.

The past contributors are Ben Coman, StÃ©phane Ducasse, Guillermo Polito, Lukas Renggli (original author of Pier from which Pillar has been extracted), Benjamin van Ryseghem and Cyril Ferlicot-Delbecque.

+This project is sponsored by ESUG: *http://www.esug.org*>file://figures/esug-logo.jpg|width=20|label=esugsponsoring+


!!!Editors

These editors have dedicated plugins for Pillar:

- *Emacs>https://github.com/pillar-markup/pillar-mode*
- *Vim>https://github.com/cdlm/vim-pillar*
- *TextMate>https://github.com/Uko/Pillar.tmbundle*
- *Atom>https://github.com/Uko/language-pillar*

!!!Pillar users
@pillarUSERS

Pillar is used in several projects. You can have a look at these projects for real use cases of Pillar.

- *the Enterprise Pharo book>https://ci.inria.fr/pharo-contribution/job/PharoForTheEnterprise/*
- *the Updated Pharo by Example>https://github.com/SquareBracketAssociates/UpdatedPharoByExample*
- *the Pharo MOOC>https://github.com/SquareBracketAssociates/PharoMooc*
- *the Pharo Laser Game Tutorial>https://github.com/SquareBracketAssociates/PharoLaserGameTutorial*
- *the Pharo Web Stack>https://github.com/SquareBracketAssociates/PharoWebStack*
- *the Marina CMS>https://github.com/tide-framework/marina*
- *the PillarHub open-access shared blog>http://pillarhub.pharocloud.com*
- *the Pier CMS>http://piercms.com*
- *the Pillar documentation itself>https://ci.inria.fr/pharo-contribution/job/EnterprisePharoBook/lastSuccessfulBuild/artifact/PillarChap/*
- *the Spec documentation>https://github.com/SpecForPharo/documentation*
- *the Pharo sound tutorial>https://github.com/xmessner/PharoSoundTutorial*

!!5 minutes tutorial

In this section we give the basic steps to get you started with your first Pillar document and exports. You first need to create a ''base directory'' inside 
which we will put all your text, configuration files, and Pillar itself.

[[[language=bash|caption=Create your base directory.|label=scr:createBaseDirectory
mkdir mydocument
cd mydocument
]]]

!!!Installing and exporting your first document

You first need to get Pillar. For that, I recommend 
*downloading executing this script>https://raw.githubusercontent.com/pillar-markup/book-skeleton/master/download.sh* in the base directory if you are on an Unix environment.

If you are on Windows you can get a new Pillar image by extracting the archive build by the *Continuous Integration>https://ci.inria.fr/pharo-contribution/job/Pillar/PHARO=40,VERSION=stable,VM=vm/lastSuccessfulBuild/artifact/Pillar.zip*.
Then you can get a Pharo *Virtual Machine for windows>http://files.pharo.org/get-files/40/pharo-win-stable.zip*.

Then, you can check everything is working fine by creating a ==first.pillar== file with this content:

[[[language=pillar|caption=Create your first pillar document.|label=scr:firstDocument
!Hello World
]]]

And finally compiling it from a terminal (see Section *@commandLineInterface* for more information about the command-line interface):

[[[language=bash|caption=Compile your first document.|label=scr:compileDocument
./pillar export --to=html first.pillar
]]]

Or in windows open a new shell (==Windows key + r== then type ==cmd==) then run:

[[[language=bash
Pharo.exe Pillar.image pillar export --to=html first.pillar
]]]

This should generate a ''output.html'' file you can open in a web browser. This content of this file will be something like:

[[[language=html
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>No title</title>
    [...]
  </head>
  <body>
    <div class="container">
      <h1>Hello World</h1>
    </div>
    [...]
  </body>
</html>
]]]

!!!Configuring a document

As you can see, there is no title in the generated ''output.html'' file. This is because we did not specify any. To specify a title, we have to add it with a configuration
at the beginning of the ''first.pillar'' file:

[[[language=pillar|caption=Add a meta data in a configuration at the beginning of your file.
{
  "title": "My first document while reading the 5 minutes Pillar tutorial"
}

!Hello World
]]]

When you compile using the same command line,

[[[language=bash
./pillar export --to=html first.pillar
]]]

or

[[[language=bash
Pharo.exe Pillar.image pillar export --to=html first.pillar
]]]

you should now get a web page with a title:

[[[language=html
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>My first document while reading the 5 minutes Pillar tutorial</title>
  </head>
]]]

Another way to achieve the same is to use a dedicated configuration file. This configuration is typically named ==pillar.conf== and is written in the 
*STON>http://smalltalkhub.com/#!/~SvenVanCaekenberghe/STON* format (see Section *@configuring* for more information about the configuration file). Create your 
first ==pillar.conf== file:

[[[language=ston|caption=Create your own configuration file.
{
  "title" : "My first document while reading the 5 minutes Pillar tutorial"
}
]]]

Meta-information specified in Pillar files take precedence over configuration in the ==pillar.conf== file.

!!!Output and multi files

When you export files you have the possibility to export all your files into a specific directory.
In order to do that you have to add a parameter into your configuration.

[[[language=ston|caption=Export into a specific folder
{
  "title" : "My first document while reading the 5 minutes Pillar tutorial",
  "outputDirectory" : "result"
}
]]]

If you export you will have a file ''result/output.html''.

You have two ways to export files:
# separate output files
# as one output file

By default Pillar export all the input files as one.
If you create a file ''second.pillar'' that contains ==I am a second file== you can add a parameter ''inputFiles'' to your configuration.

[[[language=ston|caption=Export into a specific folder
{
  "title" : "My first document while reading the 5 minutes Pillar tutorial",
  "outputDirectory" : "result",
  "inputFiles" : [ "first.pillar", "second.pillar" ]
}
]]]

If you export this with the command:


[[[language=bash
./pillar export --to=html 

#Or in windows:

Pharo.exe Pillar.image pillar export --to=html
]]]

You will get a file ''result/output.html'' that contains:

[[[language=html
<h1>I.  Hello World</h1>
<p>
I am a second file
</p>
]]]

If you want to change the name of the file you can use the parameter ''outputFile'' as we used ''outputDirectory''.

If you want separate files you can add a parameter:

[[[language=ston|caption=Export into a specific folder
{
  "title" : "My first document while reading the 5 minutes Pillar tutorial",
  "outputDirectory" : "result",
  "inputFiles" : [ "first.pillar", "second.pillar" ],
  "separateOutputFiles" : true
}
]]]

You will get a file ''result/first.html'' and a file ''result/second.html''.

!!!Exporting a different content using a template

If you want to tweak the content of the exported file, for example to reference your CSS or to add a footer, you need to create your own template (see Section 
*@templating* for more information about templating). You must write such template in its own file, e.g., ==myhtml.template==:

[[[language=html|caption= Create your own template.|label=scr:createTemplate
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>{{{title}}}</title>
  </head>
  <body>
    <div class="container">
      {{{content}}}
    </div>
    <footer>
      <p>{{author}}, {{year}}</p>
    </footer>
  </body>
</html>
]]]

Then, you need to reference this template from your configuration file. So, edit your ==pillar.conf== configuration file:

[[[language=ston
{
  "year" : 2014,
  "configurations" : {
    "html": {
      "outputType" : #html,
      "template" : "myhtml.template"
    }
  }
}
]]]

Now, add your name to ==first.pillar== :

[[[language=pillar
{
  "title": "My first document while reading the 5 minutes Pillar tutorial",
  "author": "Damien Cassou"
}

!Hello World
]]]

Finally, compile ==first.pillar== one last time

[[[language=bash
./pillar export --to=html first.pillar

#Or in windows:

Pharo.exe Pillar.image pillar export --to=html first.pillar
]]]

to generate a ==output.html== that will contain:

[[[language=html
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>My first document while reading the 5 minutes Pillar tutorial</title>
  </head>
  <body>
    <div class="container">
      <h1>Hello World</h1>
    </div>
    <footer>
      <p>Damien Cassou, 2014</p>
    </footer>
  </body>
</html>
]]]

Look at how the HTML template references ==title==, ==author== and ==year==. This variables are referenced by enclosing them in 3 curly braces. The templating 
engine that transforms your templates in documents is *Mustache>http://smalltalkhub.com/#!/~NorbertHartl/Mustache*. As you can see, I decided to put the author 
and title of the document in the ==first.pillar== file whereas the year is specified in ==pillar.conf==: this is arbitrary and you can do whatever suits you 
best, the only difference being that the ==pillar.conf== file applies to all Pillar files of the project.

This concludes our 5 minutes tutorial.

!!Writing Pillar documents

@writing

In this section we show how to write Pillar documents by presenting the Pillar syntax. You might want to have a look at the 
*cheat sheet>http://www.cheatography.com/benjaminvanryseghem/cheat-sheets/pillar* and even download and print it.

!!!Meta-information

Meta-information of a particular file is written at the start of the file between curly braces using the STON syntax (see Chapter *: STON>../STON/STON.pillar@cha:ston*). 
A meta-information starts with a word between quotation marks acting as a key, is followed by a colon ==:==, and finishes with a string between quotation marks acting as the value. 
For example, the following file,

[[[language=pillar
{ 
  "title": "My first document while reading the 5 minutes Pillar tutorial",
  "author": "Damien Cassou"
}

!Hello World
]]]

represents a Pillar document with the title and author set. You can use whatever keys you like. Use them by referencing them in templates (see Section 
*@templating* for more information about templating). As of today, the only meaningful key is ==next== which references the next pillar file in a sequence: this 
is useful to present a ==next== link to navigate between pages in a project. This ==next== meta-information is automatically filled by the system so you can 
just use it in your template: the default order comes from the ==inputFiles== configuration parameter of the ==pillar.conf== file. You can override it in your 
own document as any other meta-information.

!!!Chapters & Sections

A line starting with ==!== becomes a chapter heading. Use multiple ==!== to create sections and subsections. 

@chapterAndSections

To refer to a section or chapter, put an anchor (equivalent to \\label{chapterAndSections} in Latex) using the ==@chapterAndSections== syntax on a 
''separate line''. Then, when you want to link to it (equivalent to \\ref{chapterAndSections} in Latex), use the ==\*@chapterAndSections\*== syntax. Anchors are 
invisible and links will be rendered as: *@chapterAndSections*.

!!!Paragraphs and framed paragraphs

An empty line starts a new paragraph.

An annotated paragraph starts a line with ==\@@== followed by a keyword such as ==todo== or ==note==. For example,

[[[
@@note this is a note annotation.
]]]

generates

@@note this is a note annotation.

And,

[[[
@@todo this is a todo annotation
]]]

generates a todo annotation

@@todo this is a todo annotation

The annotation (e.g., ==todo== and ==note==) can be any word that is meaningful to the author. In HTML, annotated paragraphs triggers the generation of a  
paragraph with the annotation as the paragraph class. In LaTeX, an environment with the annotation name is generated. In HTML, you can tweak the output to make 
it look nice, for example with such JavaScript code:

[[[language=javascript
// Wraps paragraphs with class pClass inside a div and adds an H4 element with pTitle.
function transformAnnotatedParagraphs(pClass, pTitle) {
    $("p." + pClass).wrap( "<div class='annotated-paragraph "
                           + pClass + "' />" ).prepend("<h4>"+ pTitle +"</h4>");
}

transformAnnotatedParagraphs("note", "Note");
transformAnnotatedParagraphs("todo", "To do");
]]]

Above code will prepend the titles "Note" and "To do" to the ==@@note== and ==@@todo== paragraphs. You can make that looks nice using a little bit of CSS:

[[[language=css
.annotated-paragraph {
    margin: 20px 0;
    padding: 15px 30px 15px 15px;
    border-left: 5px solid #eee;
}

.annotated-paragraph h4 {
  margin-top: 0;
}

.annotated-paragraph p:last-child {
    margin-bottom: 0;
}

.note {
    background-color: #f0f7fd;
    border-color: #d0e3f0;
}

.note h4 {
    color: #3a87ad;
}

.todo {
    background-color: #dff0d8;
    border-color: #d6e9c6;
}

.todo h4 {
    color: #3c763d;
}
]]]

!!!Lists

!!!!Unordered lists

[[[
-A block of lines,
-where each line starts with ==-==
-is transformed to a bulleted list
]]]

generates

-A block of lines,
-where each line starts with ==-==
-is transformed to a bulleted list

!!!!Ordered lists

[[[
#A block of lines,
#where each line starts with ==#==
#is transformed to an ordered list
]]]

generates

#A block of lines,
#where each line starts with ==#==
#is transformed to an ordered list

!!!!Definition lists

Definition lists (''aka.'' description lists) are lists with labels:

[[[
;blue
:color of the sky
;red
:color of the fire
]]]

generates

;blue
:color of the sky
;red
:color of the fire

!!!!List nesting

[[[
-Lists can also be nested.
-#Thus, a line starting with ==-#==
-#is an element of a bulleted list that is part of an ordered list.
]]]

generates

-Lists can also be nested.
-#Thus, a line starting with ==-#==
-#is an element of a bulleted list that is part of an ordered list.

!!!Formatting
There is some sugar for font formatting:

-To make something ""bold"", write ==\""bold\""== (with 2 double quotes)
-To make something ''italic'', write ==\''italic\''== (with 2 single quotes)
-To make something ==monospaced==, write ==\=\=monospaced\=\===
-To make something --strikethrough--, write ==\--strikethrough\--==
-To make something @@subscript@@, write ==\@@subscript\@@==
-To make something ^^superscript^^, write ==\^^superscript\^^==
-To make something __underlined__, write ==\__underlined\__==

!!!Tables
To create a table, start off the lines with ==|== and separate the elements with ==|==s. Each new line represents a new row of the table. Add a single ==!== to 
let the cell become a table heading.

[[[
|!Language |!Coolness
|Smalltalk | Hypra cool
|Java | baaad
]]]

|!Language |!Coolness
|Smalltalk | Hypra cool
|Java | baaad


The contents of cells can be aligned left, centered or aligned right by using ==|{==, ==||== or ==|}== respectively.

[[[
||centered||!centered header||centered
|{ left |} right || center
]]]

generates

||centered||!centered header||centered
|{ left |} right || center

!!!Links

!!!!Internal Links and Anchors
@anchorName

To put an anchor (equivalent to \\label in Latex), use the ==@anchorName== syntax on a ''separate line''. Then, when you want to link to it (equivalent to 
\\ref in Latex), use the ==\*@anchorName\*== syntax. Anchors are invisible and links will be rendered as: *@anchorName*.

To create a link to an other pillar file, use the ==\*Alias>path.pillar@anchorName\*==. The Alias and the anchor are optional but you will need them in some 
cases (for example if you have an inter-file link and you export in LaTeX, or if you have an inter-file link and you export all your file in the same html). 

!!!!External Links

To create links to externals resources, use the ==\*Pharo>http://pharo-project.org/\*== syntax which is rendered as *Pharo>http://pharo-project.org/*.

!!!Pictures

To include a picture, use the syntax ==\+caption>file://filename|parameters+==:

[[[
+Caption of the picture>file://figures/pharo-logo.png|width=50|label=pharoLogo+
]]]

generates Figure *@pharoLogo* (this reference has been generated using ==\*@pharoLogo*==).

+This is the caption of the picture>file://figures/pharo-logo.png|width=50|label=pharoLogo+

!!!Scripts

Use scripts when you want to add code blocks to your document.

= [[[
=     foo bar
= ]]]

generates

[[[
foo bar
]]]

!!!! Script with a label or caption

If you want either a label (to reference the script later) or a caption (to give a nice title to the script), write the following:

= [[[label=script1|caption=My script that works|language=smalltalk
=     self foo bar
= ]]]

which produces

[[[label=script1|caption=My script that works|language=smalltalk
self foo bar
]]]

This script can then be referenced with ==\*@script1\*== (produces *@script1*).

!!!! Syntax highlighting
@sec:syntaxHighlighting

To specify the syntax a script is written in, you need to use the ==language== parameter.
For example on *@script1* we used the ==smalltalk== value for the ==language== parameter.

Here is a list of the supported languages:

[[[language=smalltalk|eval=true
    PRDocGeneratorAboutScriptLanguage on: stream.
]]]

If you don't want syntax highlighting, specify ==no language== as value to the ==language== parameter.

!!!! Script with line numbers

If you need to explain a long piece of code you may want the script to have line numbers you can use the ==lineNumber== parameter like this :

= [[[language=smalltalk|lineNumber=true
=     self foo bar.
=     self bar foo.
= ]]]

which produces

[[[language=smalltalk|lineNumber=true
  self foo bar.
  self bar foo.
]]]

!!!! Script from an external file

If you want you can also include a script from a external file. For example if you have a file `myProject.html` and you want to take the code from line 15 to 
line 45, instead of copy/paste the code you can use:

= [[[language=html|fromFile=myProject.html|firstLine=15|lastLine=45
= ]]]

The ==firstLine== and ==lastLine== parameters are optional. 

!!!! Generate a part of your document with a script

If you want you can also evaluate a script to generate a part of your file.
For example if you write a documentation and you give the number of classes on your project you do not want to update this number at each version of your project. 
You can just write a script one time that will generate a part of your document.

= [[[eval=true
=   | packages classes|
=   packages := (RPackageOrganizer default packages select: [ :each | each name includesSubstring: 'Pillar' ] ).
=   classes := OrderedCollection new.
=   (packages do: [ :each | each classes do: [ :class | classes add: class ] ]).
=   stream nextPutAll: 'The Pillar project contains:' , String lf, '- ==';
=     nextPutAll: packages size asString;
=     nextPutAll: ' packages==.' , String lf, '- ==';
=     nextPutAll: classes size asString;
=     nextPutAll:  'classes=='.
= ]]]

will generate:

[[[eval=true
  | packages classes|
  packages := (RPackageOrganizer default packages select: [ :each | each name includesSubstring: 'Pillar' ] ).
  classes := OrderedCollection new.
  (packages do: [ :each | each classes do: [ :class | classes add: class ] ]).
  stream nextPutAll: 'The Pillar project contains:' , String lf, '- ==';
    nextPutAll: packages size asString;
    nextPutAll: ' packages==.' , String lf, '- ==';
    nextPutAll: classes size asString;
    nextPutAll:  'classes=='.
]]]

For example the Section *@sec:syntaxHighlighting* and the Section *@configParameters* are generated.

!!!Raw

If you want to include raw text into a page you must enclose it in =={{{== and ==}}}==, otherwise Pillar ensures that text appears as you type it.

A good practice is to always specify for which kind of export the raw text must be outputted by starting the block with ==\{{{latex:== or ==\{{{html:== (for now 
only LaTeX, HTML and Markdown are supported). For example, the following shows a formula, either using LaTeX or an image depending on the kind of export.

= {{{latex:
= \begin{equation}
=   \label{eq:1}
=   \frac{1+\sqrt{2}}{2}
= \end{equation}
= }}}
= {{{html:
= (1+sqrt(2)) / 2
= }}}


This results in

{{{latex:
\begin{equation}
  \label{eq:1}
  \frac{1+\sqrt{2}}{2}
\end{equation}
}}}
{{{html:
(1+sqrt(2)) / 2
}}}

""Take care:"" avoid terminating the verbatim text with a ==}== as
this will confuse the parser. So, don't write --==\{{{\\begin{scriptsize}}}}==-- but ==\{{{\\begin{scriptsize} }}}== instead.

!!!Annotations

On Pillar you can use some annotation in order to do some things.
An annotation has this syntax:

[[[
${tag:parameter=value|parameter2=value2}$
]]]

!!!! InputFile annotation

This annotation allow you to include a file into your pillar file. We recommend you to add files at the root of your document, we still may need some 
improvement in order to include file into a paragraph of in other structure.

This annotation takes only 1 parameter, the path of your file from the ==baseDirectory== (if you don't change the base directory, it's your working directory).

Here are some examples:

[[[
  ${inputFile:test.pillar}$
	
  ${inputFile:value=test.pillar}$
	
  ${inputFile:chapter2/test.pillar}$
]]]

!!!! Slide annotation
@sec:slide

This annotation is used to create a slide structure for a ==beamer== or a ==deck.js== export.
The first parameter, ""title"", is a required parameter to give a title at your slide. If you want a slide without title just let a space. 
In a future version of Pillar this  parameter should be optional if you do not want to have a title.
You can also add a ""label"" to be able to create an internal link to your slide.

Here some examples:

[[[
  ${slide: My slide}$
	
  ${slide:title= My slide}$
	
  ${slide: My slide |label=sld:mySlide}$
]]]

!!!! Columns

@@note The column annotations currently works only for the beamer, HTML and Deck.js export on the version 1.0.0 of Pillar.

You have the possibility to create columns.
In order to do that you have to create a columns environment with the ==columns== and the ==endColumns== annotations.
Then you can create columns with the ==column== annotation. 
The column annotation takes 1 required parameter: the width of the column.

Here some examples:

[[[
  ${columns}$
	
  ${column:width=60}$
	
  bla
	
  ${column:40}$
	
  bla
	
  ${endColumns}$
]]]

!!!Preformatted (less used)

To create a preformatted block, begin each line with ==\===. A preformatted block uses equally spaced text so that spacing is preserved.

= = this is preformatted text
= = this line as well

!!!Commented lines

Lines that start with a ==%== are considered comments and will not be rendered in the resulting document, except during a Pillar export (except during export to the Pillar format itself).

!! Write a presentation
@sec:presentationPillar

Since the version 0.59 you have the possibility to write presentations with Pillar.
For now you can export a Pillar file as a ==beamer== or a ==deck.js== file.

With the default template you can provide some meta-informations to generate the first slide.
For example:

[[[
{
  "title":"Pillar's presentation",
  "subtitle":"",
  "author":"Cyril Ferlicot-Delbecque",
  "complement":"cyril.ferlicot@gmail.com"
}
]]] 

In a presentation, Pillar headers (using the ==! Title== syntax) generate the structure of the presentation (sections and subsections).
Each definition of a section generates a slide with the section title.
You can disable this inside the configuration with the parameter ==renderStructureAsSlide==.

To create a new slide you should use the ==slide== annotation (see Section *@sec:slide* ). 
A slide end at the beginning of an other slide or at the end of the document.

Example of a slide:

[[[
${slide: Pillar}$

${columns}$

${column:45}$

- One input, many outputs
-- ''HTML''
-- ''LaTeX''
-- ''Text''
-- ''Markdown''

- Textual syntax
-- No need for a specific editor

${column:55}$

+ Figure !>file://path.png|width=80+

${endColumns}$
]]]

!! Configuring your output
@configuring

In this section we show how to configure the export from the Pillar files.

!!! Configuration file

Pillar exporting mechanism can be configured using *STON>http://smalltalkhub.com/#!/~SvenVanCaekenberghe/STON*, a lightweight, text-based, human-readable data 
interchange format (similar to the popular *JSON>http://www.json.org*.

!!! Configuration parameters
@configParameters

[[[language=smalltalk|eval=true
    CCDocumentationGeneration of: PRCocoonConfiguration on: stream.
]]]

!! Templating
@templating

Pillar comes with the *Mustache>http://smalltalkhub.com/#!/~NorbertHartl/Mustache* templating engine. This means you can specify a preamble and postamble for 
your document. Here is an example (bootrap-based) HTML template using Mustache:

[[[language=html
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>{{{title}}}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">
    <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.min.css" rel="stylesheet">
    <link rel="stylesheet" href="http://yandex.st/highlightjs/8.0/styles/default.min.css">
    <script src="http://yandex.st/highlightjs/8.0/highlight.min.js"></script>

    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->
  </head>
  <body>

    <div class="container">
      {{{content}}}
    </div>

    <script src="https://code.jquery.com/jquery.js"></script>
    <script src="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
  </body>
</html>

]]]

In this example, we can see the use of ==\{\{\{title\}\}\}== and ==\{\{\{content\}\}\}== to refer to the title of the document and its actual content (the one 
exported from Pillar). You have to put such a template in a dedicated file (named ==chapter.html.template== for example) and reference this file from the 
template configuration parameter (see *@sec:confParam:template*).

!! Command-line interface
@commandLineInterface

In this section we show how to use the ==pillar== command-line interface.

One of the basic uses of the command line is:

[[[language=bash
$ ./pillar export --to=latex PharoSound.pier
# or in Windows
$ Pharo.exe Pillar.image pillar export --to=latex
]]]

You can define an export type with the parameter ==to==. The possible exports are:
[[[eval=true
  PRDocumentWriter allSubclasses do: [ :subclass | subclass isAbstract ifFalse: [ stream nextPut: $-; nextPutAll: subclass writerName; lf ] ]
]]]

In the case of a ''LaTeX'' or ''Beamer'' export Pillar will generate a script (''pillarPostExport.sh'') in order to launch the compilation of all the Tex files. During the compilation the script will create a symbolic link to the output directory root named ""root"" into the directory that contains the Tex file.
You can use this symbolic link for relatives paths.
You can customize the LaTeX command with the ==latexCommand== parameter of the configuration.
For example for ""Enterprise Pharo"" we use:

[[[language=ston
  "latexCommand" : "lualatex --file-line-error --interaction=batchmode {fileName} 2>&1 1>/dev/null
ret=$?
if [[ $ret -ne 0 ]]; then
  cat {fileNameWithoutExtension}.log
  echo \"Can't generate the PDF!\"
  exit 1
fi"
]]]

For now the script is only generated for an Unix shell. Windows users must have ''MinGW'' or ''Cygwin'' in order to launch it.

!!! Multiple Exports

You also have the possibility to launch multiple export with the ==defaultExporters== parameter.
For example you can add this to the ''pillar.conf'':

[[[
    "defaultExporters" : [ "html", "latex", "text" ],
    "inputFiles" : [ "doc.pillar" ]
]]]

Then launch:

[[[language=bash
$ ./pillar export
# or in Windows
$ Pharo.exe Pillar.image pillar export
]]]

If you do an export with this configuration you will get three files ==doc.html==, ==doc.tex== and ==doc.txt== (and you will also get a script to generate a PDF).

!! Pillar from Pharo

Pillar uses syntax similar to that of wiki, as well as a document model, parser and exporter sets. Pillar takes a string and parses it to create a PRDocument. 
This document's contents can be transformed (E.G. if there is an inputFile tag, it will be replaced by the file's content). 
Then the document will be exported.

!!! How to create a Pillar Document

It is possible to directly create a Pillar document. There are two ways to do that:

- ""* By parsing a String>@documentByString*""
- ""* By creating the document from scratch>@documentByHand*""

!!!! Creating a document by parsing a String
@documentByString

Creating a document by parsing a String is simple, you just need to use PRDocumentParser.

[[[language=smalltalk
  | wiki |
  wiki := '!My Document'
  PRDocumentParser parse: wiki
]]]

Or from a file: 
[[[language=smalltalk
  PRDocumentParser parse: (FileSystem workingDirectory / 'foo.pillar' contents)
]]]

!!!! Creating a document yourself
@documentByHand

For that, you first need to create a document

[[[language=smalltalk
  | document |
  document := PRDocument new.
]]]

Once you've created your document, you can create as many ==PRDocumantItem== subclass instances as you wish and add them. For instance, you can add a title and 
a paragraph with an illustration

[[[language=smalltalk
  | document title figure|
  document := PRDocument new.
  title := (PRHeader new)
    level: 1;
    add: (PRText content: 'foo');
    yourself.
  figure := PRFigure new
    add: (PRText content: 'Alias');
    reference: 'file://test.png';
    embedded: true;
    yourself.
  document add: title; add: figure.
  ^ document
]]]

A document usually contains many different Items as ==PRText==

[[[language=smalltalk
  | item |
  item := PRText content: 'foo'
]]]

You can find how to implement all of  them in the unit-tests of Pillar.

!!! How to write a Document
  
Once you have your document, you will want to export it. But before that, there's an optional step: transforming your document. 
A transformer is an abstraction that will visit it and adapt it. For instance, PRScriptEvaluator will visit the document and replace a script with an eval 
parameter set as true by its evaluation. 
To have the list of the different transformers, you can use a transformer like this one:

[[[language=smalltalk
  | configuration |
  configuration := PRCocoonConfiguration new baseDirectory: 'directoryWithMyFiles'.
  PRScriptEvaluator new 
    configuration: configuration;
    start: document; topNode
]]]

Now we have our document. In order to export it we need to create a new instance of the PRDocumentWriter subclasses.

[[[language=smalltalk
  PRHTMLWriter write: document
]]]

!!! How to export with a configuration

In order to export with a configuration you need to create a new configuration. To see all possible parameters, you may refer to *@configParameters*.

[[[language=smalltalk
(PRCocoonConfiguration newFromString:'
{
  "inputFiles": [ "foo.pillar", "bar.pillar"],
  "outputType": #html,
  "separateOutputFiles": false,
  "outputFile": "test.html" 
}
') export
]]]



% Local Variables:
% compile-command: "cd .. && ./pillar export --to=\"LaTeX by chapter\" PillarChap/Pillar.pillar && bash pillarPostExport.sh"
% End:
