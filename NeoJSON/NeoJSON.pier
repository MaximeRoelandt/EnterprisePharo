! JSON
@cha:JSON

JSON (JavaScript Object Notation) is a popular data-interchange format. NeoJSON is an elegant and efficient standalone Smalltalk framework to read and write 
JSON converting to and from Smalltalk objects. The framework is developed and actively maintained by Sven Van Caekenberghe.

!!An introduction to JSON

JSON is a lightweight text-based open standard designed for human-readable data interchange. It was derived from the JavaScript scripting language for 
representing simple data structures and associative arrays, called objects. Despite its relationship to JavaScript, it is language-independent, with parsers 
available for many languages.

@@note References: *http://www.json.org/*, *http://en.wikipedia.org/wiki/Json* and *http://www.ietf.org/rfc/rfc4627.txt?number=4627*.

There are only a couple of primitive types in JSON:

-numbers (integer or floating point)
-strings
-the boolean constants ==true== and ==false==
- ==null==

Only two composite types exist:

-lists (an ordered sequenece of values)
-maps (an unordered associative array, mapping string property names to values)

That is really all there is to it. No options or additions are defined in the standard.

!! NeoJSON

To load NeoJSON, evaluate the following:

[[[language=smalltalk
Gofer it
  smalltalkhubUser: 'SvenVanCaekenberghe' project: 'Neo';
  configurationOf: 'NeoJSON';
  loadStable.
]]]


The NeoJSON framework contains a reader (==NeoJSONReader==) and a writer (==NeoJSONWriter==) to parse, respectively generate, JSON to and from Pharo objects. The goals of this framework are:

-to be standalone (have no dependencies and little requirements);
-to be small, elegant and understandable;
-to be efficient (both in time and space);
-to be flexible and non-intrusive.

Compared to other Smalltalk JSON frameworks, NeoJSON

-has less dependencies and little requirements;
-can be more efficient (be faster and use less memory);
-allows for the use of schemas and mappings.

!!Primitives

Obviously, the primitive types are mapped to corresponding Pharo classes. While reading:

- JSON numbers become instances of ==Integer== or ==Float==
- JSON strings become instances of ==String==
- JSON booleans become instances of ==Boolean==
- JSON ==null== becomes ==nil==

While writing:

- Pharo numbers are converted to floats, except for instances of ==Integer== that become JSON integers;
- Pharo strings become JSON strings;
- Pharo booleans become JSON booleans;
- Pharo ==nil== becomes JSON ==null==.


!! Generic Mode

NeoJSON can operate in a generic mode that requires no further configuration. 

!!! Reading from JSON

While reading:

-JSON maps become instances of mapClass, ==Dictionary== by default;
-JSON lists become instances of listClass, ==Array== by default.

The following example creates a Pharo array from a JSON expression:

[[[language=smalltalk
NeoJSONReader fromString: ' [ 1,2,3 ] '.
]]]

This expression can be decomposed to better control the reading process:

[[[language=smalltalk
(NeoJSONReader on: ' [ 1,2,3 ] ' readStream)
  listClass: OrderedCollection;
  next.
]]]

The above expression is equivalent to the previous one except that a Pharo ordered collection will be used in place of an array.


The next example creates a Pharo dictionary (with =='x'== and =='y'== keys):

[[[language=smalltalk
NeoJSONReader fromString: ' { "x" : 1, "y" : 2 } '.
]]]

To automatically convert keys to symbols, pass ==true== to ==propertyNamesAsSymbols:== like this:

[[[language=smalltalk
(NeoJSONReader on: ' { "x" : 1, "y" : 2 } ' readStream)
	propertyNamesAsSymbols: true;
	next
]]]

The result of this expression is a dictionary with ==#x== and ==#y== as keys.

!!!Writing to JSON

While writing:

-instances of ==Dictionary== and ==SmallDictionary== become maps;
-all other collections become lists;
-all other non-primitive objects are rejected.

Here are some examples writing in generic mode:

[[[language=smalltalk
NeoJSONWriter toString: #(1 2 3).
NeoJSONWriter toString: { Float pi. true. false. 'string' }.
NeoJSONWriter toString: { #a -> '1' . #b -> '2' } asDictionary.
]]]

Above expressions return a compact string (/i.e./, with neither indentation nor new lines). To get a nicely formatted output, use ==toStringPretty:== like this:

[[[language=smalltalk
NeoJSONWriter toStringPretty: #(1 2 3).
]]]

NeoJSONWriter can output either in a compact format (the default) or in a pretty printed format. 

SD: examples how to do that.


In order to use the generic mode, you have to convert your domain objects to and from Dictionaries and SequenceableCollections. This is relatively easy but not 
very efficient, depending on the use case.


!! Schemas and Mappings

NeoJSON allows for the optional specification of schemas and mappings to be used when writing and/or when reading. A ==NeoJSONMapper== holds a number of 
schemas. Each schema is identified by either a class or a symbol. Each schema specifies a mapping, an object that will help in doing the actual reading or 
writing.

The most common mapping deals with objects that define a number of named properties or attributes. These can be defined based on instance variables (optionally 
derived by reflection), accessors (getter/setter pairs) or even blocks. Such an object mapping is identified by a Smalltalk class, which is also used to create 
new instances. Each property mapping can have an optional value schema to be used recursively when reading and/or writing property values.

The less common custom mapping holds a generic reader and/or writer block to deal with special cases such as specific collection types with an optional schema 
for the elements, or a direct mapping of semi primitive types such as Date or DateAndTime.

A mapping can be specified explicitly on a mapper, or can be resolved using the #neoJsonMapping: class method.

Here are some examples of mappings:

[[[
mapper mapAllInstVarsFor: Point.

mapper for: TestObject do: [ :mapping |
    mapping mapInstVars: #(id name).
    (mapping mapInstVar: #timestamp to: 'created-at') valueSchema: DateAndTime.
    (mapping mapInstVar: #points) valueSchema: #ArrayOfPoints.
    (mapping mapInstVar: #bytes) valueSchema: ByteArray ].

mapper for: DateAndTime customDo: [ :mapping |
    mapping decoder: [ :string | DateAndTime fromString: string ].
    mapping encoder: [ :dateAndTime | dateAndTime printString ] ].

mapper for: #ArrayOfPoints customDo: [ :mapping |
    mapping listOfElementSchema: Point ].

mapper for: #DictionaryOfPoints customDo: [ :mapping |
    mapping mapWithValueSchema: Point ].

mapper for: ByteArray customDo: [ :mapping |
    mapping listOfType: ByteArray ]
The classes NeoJSONReader and NeoJSONWriter are subclasses of NeoJSONMapper. When writing, mappings are used when arbitrary objects are seen. For example, in 
order to be able to write an array of points, you could do as follows:

String streamContents: [ :stream |
    (NeoJSONWriter on: stream)
        prettyPrint: true;
        mapInstVarsFor: Point;
        nextPut: (Array with: 1@3 with: -1@3) ].

]]]

Collections are handled automatically, like in the generic case. When reading, a mapping is used as a binding or an explicit type specifying what Pharo objects 
that you want to read. Here is a very simple case, reading a map as a point:


[[[
(NeoJSONReader on: ' { "x" : 1, "y" : 2 } ' readStream)
    mapInstVarsFor: Point;
    nextAs: Point.  
]]]

Since JSON lacks a universal way to specify the class of an object/map, we have to specify the target schema that we want to use as an argument to ==nextAs:==.

With custom mappings, it is possible to

-define the schema of the elements of a list
-define the schema of the elements of a list as well as the class of the list
-define the schema of the values of a map In fact, NeoJSONCustomMapping can be extended to implement even more specialized mappings.

Finally, here is a more complex example, reading a list of maps as an array of points:

[[[
(NeoJSONReader on: '[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]' readStream)
    mapInstVarsFor: Point;
    for: #ArrayOfPoints customDo: [ :mapping |
        mapping listOfElementSchema: Point ];
    nextAs: #ArrayOfPoints.
]]]

NeoJSON deals efficiently with mappings: the minimal amount of intermediary structures are created, which is quite different from the generic case.

!!Internals

On modern hardware, NeoJSON can write or read in the tens of thousands of small objects per second. Several benchmarks are included in the unit tests package.



!!Emitting null values

When mapping my objects with NeoJSONWriter, it is not writing the properties whose values are null.

[[[
	NeoJSONPropertyMapping>>#writeObject: anObject on: jsonMapWriter
	| value |
	value := getter value: anObject.
	value 
		ifNotNil: [ jsonMapWriter writeKey: propertyName value: value as: valueSchema ] 
]]]

It is a good default (saves space, and cpu cycles). But in there are cases where the consumer of the JSON objects expect the objects to have all the attributes 
previously defined.

NeoJSON is cool and it supports this behavior. Set the writeNil: to true as follows and you are done.

[[[

 String streamContents: [ :stream |
    (NeoJSONWriter on: stream) 
      writeNil: true;
      mapAllInstVarsFor: Point;
      nextPut: Point new.
]]]
which will give you:
[[[
  {"x":null,"y":null}
]]]
instead of:

[[[
  {}
]]]

!! Without Mapping Definition

Both NeoCSV and NeoJSON can operate in two ways, (1) without the definition of any schema's or (2) with the definition of schema's and mappings. Therefore you 
can use them both using a quick and dirty explore style. Here are some examples: 

[[[
'my-data.csv' asFileReference readStreamDo: [ :in | (NeoCSVReader on: in) upToEnd ].

  ->  an array of arrays
]]]

[[[
'my-data.json' asFileReference readStreamDo: [ :in | (NeoJSONReader on: in) next ].

  => objects structured using dictionaries and arrays
]]]


!! Conclusion

NeoJSON is a powerful library to convert objects. Now Sven developed STON (Smalltalk object notation) which is closer to Pharo syntax and handles cycles and 
references between serialized objects. 

%  LocalWords:  Caekenberghe
