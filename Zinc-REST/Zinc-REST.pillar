! REST Web Services

Zinc HTTP Components is well suited to the implementation of REST web services, both the client and the server parts. REST or *Representational State Transfer>http://en.wikipedia.org/wiki/Representational_state_transfer* is an architectural style most easily described as using HTTP verbs and URIs to deal with encoded resources. Some kind of framework is needed to successfully implement a non-trivial REST service. There is one available in the Zinc-REST-Server package, for example. Here we will implement a very small, simplified example by hand, for educational purposes.

The service will allow arbitrary *JSON>http://www.json.org/* objects to be stored on the server, each identified by an URI allocated by the server. Here is the REST API exposed by the server.

- ==GET /== - returns a list of all known stored object URIs
- ==GET /n== - returns the JSON object known under URI ==/n==
- ==POST /== - creates a new entry with JSON as contents, returns the new URI
- ==PUT /n== - updates (replaces) the contents of an existing JSON object known under URI ==/n==
- ==DELETE /n== - remove the JSON object known under URI ==/n==

A proper implementation should best use a couple of classes, depending on how far you want to go. The following implementation is written in a workspace, not using any classes. Start by creating one global variable to hold the objects. This will be a standard dictionary mapping string URIs to objects.

[[[
JSONStore := Dictionary new.
]]]

The server implementation uses two helper objects: a jsonEntityBuilder and a mapper. Both make use of block closures.

[[[
| jsonEntityBuilder mapper |

jsonEntityBuilder := [ :object |
    ZnEntity
        with: ((String streamContents: [ :stream |
                    STON jsonWriter on: stream; prettyPrint: true; nextPut: object.
                    stream cr ])
                        replaceAll: Character cr with: Character lf)
        type: ZnMimeType applicationJson ].

mapper := {

    [ :request |
        request uri isSlash and: [ request method = #GET ] ]
    ->
    [ :request |
        ZnResponse ok: (jsonEntityBuilder value: JSONStore keys asArray) ].

    [ :request |
        (request uri hasPath and: [ request method = #GET ])
            and: [ request uri pathSegments size = 1 ] ]
    ->
    [ :request | | uri |
        uri := request uri pathPrintString.
        JSONStore
            at: uri
            ifPresent: [ :object | ZnResponse ok: (jsonEntityBuilder value: object) ]
            ifAbsent: [ ZnResponse notFound: uri ] ].

    [ :request |
        (request uri isSlash and: [ request method = #POST ])
            and: [ request contentType = ZnMimeType applicationJson ] ]
    ->
    [ :request | | uri |
        uri := '/', (JSONStore size + 1) asString.
        JSONStore at: uri put: (STON fromString: request contents).
        (ZnResponse created: uri)
            entity: (jsonEntityBuilder value: 'Created ', uri);
            yourself ].

    [ :request |
        ((request uri hasPath and: [ request method = #PUT ])
            and: [ request uri pathSegments size = 1 ])
                and: [ request contentType = ZnMimeType applicationJson ] ]
    ->
    [ :request | | uri |
        uri := request uri pathPrintString.
        (JSONStore includesKey: uri)
            ifTrue: [
                JSONStore at: uri put: (STON fromString: request contents).
                ZnResponse ok: (jsonEntityBuilder value: 'Updated') ]
            ifFalse: [ ZnResponse notFound: uri ] ].

    [ :request |
        (request uri hasPath and: [ request method = #DELETE ])
            and: [ request uri pathSegments size = 1 ] ]
    ->
    [ :request | | uri |
        uri := request uri pathPrintString.
        (JSONStore removeKey: uri ifAbsent: [ nil ])
            ifNil: [ ZnResponse notFound: uri ]
            ifNotNil: [ ZnResponse ok: (jsonEntityBuilder value: 'Deleted') ] ].

}.

(ZnServer startDefaultOn: 1701)
    logToTranscript;
    onRequestRespond: [ :request |
        (mapper detect: [ :each | each key value: request ] ifNone: [ nil ])
            ifNil: [ ZnResponse badRequest: request ]
            ifNotNil: [ :handler |
                handler value value: request ] ].
]]]

The mapper is a dynamically created array of associations (not a dictionary). Each association consists of two blocks. The first block is a condition: it tests a request and returns true when it matches. The second block is a handler that is evaluated with the incoming request to produce a response, if and only if the first condition matched.

The associations in the mapper follow exactly the list of the REST API as shown earlier. The server is set up with a block based delegate using the ==onRequestRepond:== method. Again, a more object oriented implementation would use a proper delegate object here, but for this example, the block is clearer.

The server logic thus becomes: find a matching entry in the mapper and invoke it. If no matching entry is found, we have a bad request. Error handling is of course rather limited in this small example.

The jsonEntityBuilder block helps in transforming Smalltalk objects to a JSON entity. We use the *Smalltalk Object Notation>http://github.com/svenvc/ston* STON writer and reader here because it is backwards compatible with JSON. Note that to be JSON compatible, only ==Array==s and ==Dictionary==ies should be used. We use linefeeds to improve compatibility with internet conventions as well as pretty printing to help human interpretation of the data.

Here is a command line session using the Unix utility *curl>http://en.wikipedia.org/wiki/CURL*, interacting with our server.

[[[language=bash
$ curl http://localhost:1701/
[ ]

$ curl -X POST -d '[1,2,3]' -H'Content-type:application/json' http://localhost:1701/
"Created /1"

$ curl http://localhost:1701/1
[
    1,
    2,
    3
]

$ curl -X POST -d '{"bar":-2}' -H'Content-type:application/json' http://localhost:1701/
"Created /2"

$ curl http://localhost:1701/2
{
    "bar" : -2
}

$ curl -X PUT -d '{"bar":-1}' -H'Content-type:application/json' http://localhost:1701/2
"Updated /2"

$ curl http://localhost:1701/2
{
    "bar" : -1
}

$ curl http://localhost:1701/
[
    "/1",
    "/2"
]

$ curl -X DELETE http://localhost:1701/2
"Deleted /2"

$ curl http://localhost:1701/2
Not Found /2
]]]

It is trivial to use ==ZnClient== to have the same interaction. But we can do better: using a contentWriter and contentReader, we can customise the client to do the JSON conversions automatically.

[[[
| client |

client := ZnClient new
    url: 'http://localhost:1701';
    enforceHttpSuccess: true;
    accept: ZnMimeType applicationJson;
    contentWriter: [ :object |
        ZnEntity
            with: (String streamContents: [ :stream |
                        STON jsonWriter on: stream; nextPut: object ])
            type: ZnMimeType applicationJson ];
    contentReader: [ :entity |
        STON fromString: entity contents ];
    yourself.
]]]

Now we can hold the same conversation as above, only in this case in terms of real Smalltalk objects.

[[[
 client get: '/'
 ==>> #()

 client post: '/' contents: #(1 2 3)
 ==>> 'Created /1'

 client get: '/1'
 ==>> #(1 2 3)

 client post: '/' contents: (Dictionary with: #bar -> -2)
 ==>> 'Created /2'

 client put: '/2' contents: (Dictionary with: #bar -> -1)
 ==>> 'Updated /2'

 client get: '/2'
 ==>> a Dictionary('bar'->-1 )

 client get: '/'
 ==>> #('/1' '/2')

 client delete: '/2'
 ==>> 'Deleted /2'

 client get: '/2'
 ==>> throws a ZnHttpUnsuccessful exception
]]]

This rather long example concludes the HTTP chapter.